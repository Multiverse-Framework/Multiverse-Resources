#usda 1.0
(
    defaultPrim = "hsrb"
    metersPerUnit = 1
    upAxis = "Z"
)

def Urdf "urdf"
{
    string urdf:name = "hsrb"

    def UrdfRobot "robot"
    {
        def UrdfMaterial "materials"
        {
            def UrdfMaterial "M_base_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_base_link_visual_1"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_base_link_visual_2"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_base_range_sensor_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_torso_lift_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_head_pan_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_head_tilt_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_head_tilt_link_visual_1"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_head_tilt_link_visual_2"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_head_l_stereo_camera_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/black.png@
            }

            def UrdfMaterial "M_head_r_stereo_camera_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/black.png@
            }

            def UrdfMaterial "M_head_rgbd_sensor_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/rgbd.png@
            }

            def UrdfMaterial "M_arm_lift_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_arm_flex_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_arm_roll_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }

            def UrdfMaterial "M_wrist_flex_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/gray.png@
            }

            def UrdfMaterial "M_wrist_roll_link_visual_0"
            {
                asset urdf:material:texture = @.//hsrb/cache/syhSv5ZF5I/hsrb/textures/white.png@
            }
        }
    }
}

def Xform "hsrb"
{
    def Xform "base_footprint" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)

        def Xform "base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (-0.036911655, 0.000529424, 0.27257308)
            float3 physics:diagonalInertia = (0.87332594, 6.004276, 6.1523304)
            float physics:mass = 51.38246
            quatf physics:principalAxes = (0.00031106165, 0.6520858, 0.0011596736, 0.75814426)
            float urdf:link:inertial:inertia:ixx = 0.87332594
            float urdf:link:inertial:inertia:iyy = 6.004276
            float urdf:link:inertial:inertia:izz = 6.1523304
            float urdf:link:inertial:mass = 51.38246
            float3 urdf:link:inertial:origin:rpy = (0.014468076, -1.4206516, 3.128328)
            point3f urdf:link:inertial:origin:xyz = (-0.036911655, 0.000529424, 0.27257308)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_base_link_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/base_light.usda@</SM_URG_003>
            )
            {
                rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_0/Materials/M_base_link_visual_0>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/base_light.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_base_link_visual_0>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_base_link_visual_0" (
                        prepend references = @./hsrb/materials/usd/M_base_link_visual_0.usda@</M_base_link_visual_0>
                    )
                    {
                    }
                }

                def GeomSubset "URG_Material_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867]
                    rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_0/Materials/M_base_link_visual_0>
                }

                def GeomSubset "Bumper_Material_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312]
                    rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_0/Materials/M_base_link_visual_0>
                }

                def GeomSubset "Base_Material_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744]
                    rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_0/Materials/M_base_link_visual_0>
                }
            }

            def Mesh "SM_base_link_visual_1" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/body_light.usda@</SM_Base_007>
            )
            {
                rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_1/Materials/M_base_link_visual_1>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/body_light.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_base_link_visual_1>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_base_link_visual_1" (
                        prepend references = @./hsrb/materials/usd/M_base_link_visual_1.usda@</M_base_link_visual_1>
                    )
                    {
                    }
                }

                def GeomSubset "Material_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393]
                    rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_1/Materials/M_base_link_visual_1>
                }

                def GeomSubset "Material_004_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token elementType = "face"
                    uniform token familyName = "materialBind"
                    int[] indices = [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415]
                    rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_1/Materials/M_base_link_visual_1>
                }
            }

            def Mesh "SM_base_link_visual_2" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/torso_base.usda@</SM_Torso_Base>
            )
            {
                rel material:binding = </hsrb/base_footprint/base_link/SM_base_link_visual_2/Materials/M_base_link_visual_2>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/torso_base.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_base_link_visual_2>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_base_link_visual_2" (
                        prepend references = @./hsrb/materials/usd/M_base_link_visual_2.usda@</M_base_link_visual_2>
                    )
                    {
                    }
                }
            }

            def Mesh "SM_base_link_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./hsrb/meshes/usd/base.usda@</SM_base>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/base.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def PhysicsRevoluteJoint "base_roll_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/base_footprint/base_link>
                rel physics:body1 = </hsrb/base_roll_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </hsrb/base_roll_link>
                float3 urdf:joint:origin:rpy = (0, 0, 0)
                point3f urdf:joint:origin:xyz = (0, 0, 0)
                prepend rel urdf:joint:parent = </hsrb/base_footprint/base_link>
                uniform token urdf:joint:type = "continuous"
            }

            def Xform "base_range_sensor_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (-4.430885e-11, -2.149133e-10, -0.005050084)
                float3 physics:diagonalInertia = (0.000044946875, 0.00007912975, 0.00007912975)
                float physics:mass = 0.1328751
                quatf physics:principalAxes = (0.25146082, -0.66088384, 0.25146082, 0.66088384)
                float urdf:link:inertial:inertia:ixx = 0.000044946875
                float urdf:link:inertial:inertia:iyy = 0.00007912975
                float urdf:link:inertial:inertia:izz = 0.00007912975
                float urdf:link:inertial:mass = 0.1328751
                float3 urdf:link:inertial:origin:rpy = (-2.4144394, 1.5707964, 0)
                point3f urdf:link:inertial:origin:xyz = (-4.430885e-11, -2.149133e-10, -0.005050084)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1675, 0, 0.1844, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "SM_base_range_sensor_link_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                    prepend references = @./hsrb/meshes/usd/laser.usda@</SM_Cube_002>
                )
                {
                    rel material:binding = </hsrb/base_footprint/base_link/base_range_sensor_link/SM_base_range_sensor_link_visual_0/Materials/M_base_range_sensor_link_visual_0>
                    color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                    float[] primvars:displayOpacity = [1]
                    asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/laser.dae@
                    rel urdf:visual:material = </urdf/robot/materials/M_base_range_sensor_link_visual_0>
                    float3 urdf:visual:origin:rpy = (0, 0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_base_range_sensor_link_visual_0" (
                            prepend references = @./hsrb/materials/usd/M_base_range_sensor_link_visual_0.usda@</M_base_range_sensor_link_visual_0>
                        )
                        {
                        }
                    }

                    def GeomSubset "Material_002" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token elementType = "face"
                        uniform token familyName = "materialBind"
                        int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
                        rel material:binding = </hsrb/base_footprint/base_link/base_range_sensor_link/SM_base_range_sensor_link_visual_0/Materials/M_base_range_sensor_link_visual_0>
                    }

                    def GeomSubset "Material_001_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform token elementType = "face"
                        uniform token familyName = "materialBind"
                        int[] indices = [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295]
                        rel material:binding = </hsrb/base_footprint/base_link/base_range_sensor_link/SM_base_range_sensor_link_visual_0/Materials/M_base_range_sensor_link_visual_0>
                    }
                }

                def Mesh "SM_base_range_sensor_link_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                    prepend references = @./hsrb/meshes/usd/laser.usda@</SM_Cube_002>
                )
                {
                    uniform token physics:approximation = "convexHull"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:collision:origin:rpy = (0, 0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0)
                    asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/laser.stl@
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "base_imu_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1, -2.0682310711021444e-13, 0), (0, 2.0682310711021444e-13, -1, 0), (0.0005, 0.1296, 0.181, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def PhysicsPrismaticJoint "torso_lift_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/base_footprint/base_link>
                rel physics:body1 = </hsrb/torso_lift_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0.752)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 0.345
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </hsrb/torso_lift_link>
                float urdf:joint:limit:effort = 100
                float urdf:joint:limit:lower = 0
                float urdf:joint:limit:upper = 0.345
                float urdf:joint:limit:velocity = 0.1
                prepend rel urdf:joint:mimic:joint = </hsrb/base_footprint/base_link/arm_lift_joint>
                float urdf:joint:mimic:multiplier = 0.5
                float urdf:joint:mimic:offset = 0
                float3 urdf:joint:origin:rpy = (0, 0, 0)
                point3f urdf:joint:origin:xyz = (0, 0, 0.752)
                prepend rel urdf:joint:parent = </hsrb/base_footprint/base_link>
                uniform token urdf:joint:type = "prismatic"
            }

            def PhysicsPrismaticJoint "arm_lift_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/base_footprint/base_link>
                rel physics:body1 = </hsrb/arm_lift_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0.34)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = 0
                float physics:upperLimit = 0.69
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </hsrb/arm_lift_link>
                float urdf:joint:limit:effort = 100
                float urdf:joint:limit:lower = 0
                float urdf:joint:limit:upper = 0.69
                float urdf:joint:limit:velocity = 0.2
                float3 urdf:joint:origin:rpy = (0, 0, 0)
                point3f urdf:joint:origin:xyz = (0, 0, 0.34)
                prepend rel urdf:joint:parent = </hsrb/base_footprint/base_link>
                uniform token urdf:joint:type = "prismatic"
            }
        }
    }

    def Xform "base_roll_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "base_r_drive_wheel_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_roll_link>
            rel physics:body1 = </hsrb/base_r_drive_wheel_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.11, -0.133, 0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            vector3f urdf:joint:axis = (0, 1, 0)
            prepend rel urdf:joint:child = </hsrb/base_r_drive_wheel_link>
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.11, -0.133, 0.04)
            prepend rel urdf:joint:parent = </hsrb/base_roll_link>
            uniform token urdf:joint:type = "continuous"
        }

        def PhysicsRevoluteJoint "base_l_drive_wheel_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_roll_link>
            rel physics:body1 = </hsrb/base_l_drive_wheel_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.11, 0.133, 0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            vector3f urdf:joint:axis = (0, 1, 0)
            prepend rel urdf:joint:child = </hsrb/base_l_drive_wheel_link>
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.11, 0.133, 0.04)
            prepend rel urdf:joint:parent = </hsrb/base_roll_link>
            uniform token urdf:joint:type = "continuous"
        }

        def PhysicsRevoluteJoint "base_r_passive_wheel_x_frame_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_roll_link>
            rel physics:body1 = </hsrb/base_r_passive_wheel_x_frame>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.1495, -0.055, 0.03)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/base_r_passive_wheel_x_frame>
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.1495, -0.055, 0.03)
            prepend rel urdf:joint:parent = </hsrb/base_roll_link>
            uniform token urdf:joint:type = "continuous"
        }

        def PhysicsRevoluteJoint "base_l_passive_wheel_x_frame_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_roll_link>
            rel physics:body1 = </hsrb/base_l_passive_wheel_x_frame>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.1495, 0.055, 0.03)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/base_l_passive_wheel_x_frame>
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.1495, 0.055, 0.03)
            prepend rel urdf:joint:parent = </hsrb/base_roll_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "base_r_drive_wheel_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00007162831, 0.00007162831, 0.00012063716)
        float physics:mass = 0.15079644
        quatf physics:principalAxes = (0, 0, 0.70710677, -0.70710677)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00007162831
        float urdf:link:inertial:inertia:iyy = 0.00007162831
        float urdf:link:inertial:inertia:izz = 0.00012063716
        float urdf:link:inertial:mass = 0.15079644
        float3 urdf:link:inertial:origin:rpy = (-1.5707964, 0, 3.1415927)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.11, -0.133, 0.04, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "SM_base_r_drive_wheel_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.04, -0.04, -0.015), (0.04, 0.04, 0.015)]
            double height = 0.03
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.04
            float urdf:geometry:cylinder:length = 0.03
            float urdf:geometry:cylinder:radius = 0.04
            float3 urdf:visual:origin:rpy = (1.5707964, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, 1, 0), (0, -1, -1.0347278589506459e-13, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "SM_base_r_drive_wheel_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.04, -0.04, -0.015), (0.04, 0.04, 0.015)]
            double height = 0.03
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.04
            float3 urdf:collision:origin:rpy = (1.5707964, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:cylinder:length = 0.03
            float urdf:geometry:cylinder:radius = 0.04
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, 1, 0), (0, -1, -1.0347278589506459e-13, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "base_l_drive_wheel_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00007162831, 0.00007162831, 0.00012063716)
        float physics:mass = 0.15079644
        quatf physics:principalAxes = (0, 0, 0.70710677, -0.70710677)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00007162831
        float urdf:link:inertial:inertia:iyy = 0.00007162831
        float urdf:link:inertial:inertia:izz = 0.00012063716
        float urdf:link:inertial:mass = 0.15079644
        float3 urdf:link:inertial:origin:rpy = (-1.5707964, 0, 3.1415927)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.11, 0.133, 0.04, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cylinder "SM_base_l_drive_wheel_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.04, -0.04, -0.015), (0.04, 0.04, 0.015)]
            double height = 0.03
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.04
            float urdf:geometry:cylinder:length = 0.03
            float urdf:geometry:cylinder:radius = 0.04
            float3 urdf:visual:origin:rpy = (1.5707964, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, 1, 0), (0, -1, -1.0347278589506459e-13, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "SM_base_l_drive_wheel_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.04, -0.04, -0.015), (0.04, 0.04, 0.015)]
            double height = 0.03
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.04
            float3 urdf:collision:origin:rpy = (1.5707964, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:cylinder:length = 0.03
            float urdf:geometry:cylinder:radius = 0.04
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, 1, 0), (0, -1, -1.0347278589506459e-13, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "base_r_passive_wheel_x_frame" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, -0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "base_r_passive_wheel_y_frame_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_r_passive_wheel_x_frame>
            rel physics:body1 = </hsrb/base_r_passive_wheel_y_frame>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            vector3f urdf:joint:axis = (0, 1, 0)
            prepend rel urdf:joint:child = </hsrb/base_r_passive_wheel_y_frame>
            prepend rel urdf:joint:parent = </hsrb/base_r_passive_wheel_x_frame>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "base_r_passive_wheel_y_frame" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, -0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "base_r_passive_wheel_z_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_r_passive_wheel_y_frame>
            rel physics:body1 = </hsrb/base_r_passive_wheel_z_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </hsrb/base_r_passive_wheel_z_link>
            prepend rel urdf:joint:parent = </hsrb/base_r_passive_wheel_y_frame>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "base_r_passive_wheel_z_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00004071504, 0.00004071504, 0.00004071504)
        float physics:mass = 0.11309733
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00004071504
        float urdf:link:inertial:inertia:iyy = 0.00004071504
        float urdf:link:inertial:inertia:izz = 0.00004071504
        float urdf:link:inertial:mass = 0.11309733
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, -0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Sphere "SM_base_r_passive_wheel_z_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometrySphereAPI"]
        )
        {
            float3[] extent = [(-0.03, -0.03, -0.03), (0.03, 0.03, 0.03)]
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.03
            float urdf:geometry:sphere:radius = 0.03
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Sphere "SM_base_r_passive_wheel_z_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI"]
        )
        {
            float3[] extent = [(-0.03, -0.03, -0.03), (0.03, 0.03, 0.03)]
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.03
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.03
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "base_l_passive_wheel_x_frame" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, 0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "base_l_passive_wheel_y_frame_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_l_passive_wheel_x_frame>
            rel physics:body1 = </hsrb/base_l_passive_wheel_y_frame>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            vector3f urdf:joint:axis = (0, 1, 0)
            prepend rel urdf:joint:child = </hsrb/base_l_passive_wheel_y_frame>
            prepend rel urdf:joint:parent = </hsrb/base_l_passive_wheel_x_frame>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "base_l_passive_wheel_y_frame" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, 0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "base_l_passive_wheel_z_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/base_l_passive_wheel_y_frame>
            rel physics:body1 = </hsrb/base_l_passive_wheel_z_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </hsrb/base_l_passive_wheel_z_link>
            prepend rel urdf:joint:parent = </hsrb/base_l_passive_wheel_y_frame>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "base_l_passive_wheel_z_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.00004071504, 0.00004071504, 0.00004071504)
        float physics:mass = 0.11309733
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00004071504
        float urdf:link:inertial:inertia:iyy = 0.00004071504
        float urdf:link:inertial:inertia:izz = 0.00004071504
        float urdf:link:inertial:mass = 0.11309733
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1495, 0.055, 0.03, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Sphere "SM_base_l_passive_wheel_z_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometrySphereAPI"]
        )
        {
            float3[] extent = [(-0.03, -0.03, -0.03), (0.03, 0.03, 0.03)]
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.03
            float urdf:geometry:sphere:radius = 0.03
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Sphere "SM_base_l_passive_wheel_z_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI"]
        )
        {
            float3[] extent = [(-0.03, -0.03, -0.03), (0.03, 0.03, 0.03)]
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.03
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.03
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "torso_lift_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.038848523, -0.00041583693, -0.3223644)
        float3 physics:diagonalInertia = (0.042015318, 1.4784328, 1.4862946)
        float physics:mass = 11.26841
        quatf physics:principalAxes = (0.5241636, -0.5239796, -0.47535187, -0.4740659)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.042015318
        float urdf:link:inertial:inertia:iyy = 1.4784328
        float urdf:link:inertial:inertia:izz = 1.4862946
        float urdf:link:inertial:mass = 11.26841
        float3 urdf:link:inertial:origin:rpy = (-1.5812219, -1.4720246, 0.011897392)
        point3f urdf:link:inertial:origin:xyz = (-0.038848523, -0.00041583693, -0.3223644)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.752, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_torso_lift_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/torso_light.usda@</SM_Torso_005>
        )
        {
            rel material:binding = </hsrb/torso_lift_link/SM_torso_lift_link_visual_0/Materials/M_torso_lift_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/torso_light.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_torso_lift_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_torso_lift_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_torso_lift_link_visual_0.usda@</M_torso_lift_link_visual_0>
                )
                {
                }
            }

            def GeomSubset "Material_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices
                rel material:binding = </hsrb/torso_lift_link/SM_torso_lift_link_visual_0/Materials/M_torso_lift_link_visual_0>
            }

            def GeomSubset "Material_001_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148]
                rel material:binding = </hsrb/torso_lift_link/SM_torso_lift_link_visual_0/Materials/M_torso_lift_link_visual_0>
            }
        }

        def Mesh "SM_torso_lift_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/torso.usda@</SM_torso>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/torso.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "head_pan_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/torso_lift_link>
            rel physics:body1 = </hsrb/head_pan_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -220.0158
            float physics:upperLimit = 100.26762
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </hsrb/head_pan_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -3.84
            float urdf:joint:limit:upper = 1.75
            float urdf:joint:limit:velocity = 1
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0, 0)
            prepend rel urdf:joint:parent = </hsrb/torso_lift_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "head_pan_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.006927148, -0.0000025756406, -0.028507559)
        float3 physics:diagonalInertia = (0.00039089355, 0.0005272923, 0.00063294964)
        float physics:mass = 0.3155759
        quatf physics:principalAxes = (-0.00023151653, -0.5442028, 0.000047718015, 0.8389537)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00039089355
        float urdf:link:inertial:inertia:iyy = 0.0005272923
        float urdf:link:inertial:inertia:izz = 0.00063294964
        float urdf:link:inertial:mass = 0.3155759
        float3 urdf:link:inertial:origin:rpy = (0.0008144742, 1.150877, -3.1405125)
        point3f urdf:link:inertial:origin:xyz = (-0.006927148, -0.0000025756406, -0.028507559)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.752, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_head_pan_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/head_pan.usda@</SM_Head_Pan_002>
        )
        {
            rel material:binding = </hsrb/head_pan_link/SM_head_pan_link_visual_0/Materials/M_head_pan_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/head_pan.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_head_pan_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_head_pan_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_head_pan_link_visual_0.usda@</M_head_pan_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_head_pan_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/head_pan.usda@</SM_Head_Pan_002>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/head_pan.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "head_tilt_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/head_pan_link>
            rel physics:body1 = </hsrb/head_tilt_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.02, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = -89.95438
            float physics:upperLimit = 29.793806
            vector3f urdf:joint:axis = (0, -1, 0)
            prepend rel urdf:joint:child = </hsrb/head_tilt_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -1.57
            float urdf:joint:limit:upper = 0.52
            float urdf:joint:limit:velocity = 1
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.02, 0, 0)
            prepend rel urdf:joint:parent = </hsrb/head_pan_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "head_tilt_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.055457424, 0.00000331255, 0.09130255)
        float3 physics:diagonalInertia = (0.018316379, 0.080843374, 0.09207418)
        float physics:mass = 4.5782785
        quatf physics:principalAxes = (0.8760982, 0.0035232923, 0.48211908, -0.0008134232)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.018316379
        float urdf:link:inertial:inertia:iyy = 0.080843374
        float urdf:link:inertial:inertia:izz = 0.09207418
        float urdf:link:inertial:mass = 4.5782785
        float3 urdf:link:inertial:origin:rpy = (0.010071032, 1.006141, 0.0036851603)
        point3f urdf:link:inertial:origin:xyz = (-0.055457424, 0.00000331255, 0.09130255)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.02, 0, 0.752, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_head_tilt_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/head_upper.usda@</SM_Head_Upper>
        )
        {
            rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_0/Materials/M_head_tilt_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/head_upper.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_head_tilt_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_head_tilt_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_head_tilt_link_visual_0.usda@</M_head_tilt_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_head_tilt_link_visual_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/head_tilt.usda@</SM_Head_Tilt>
        )
        {
            rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_1/Materials/M_head_tilt_link_visual_1>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/head_tilt.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_head_tilt_link_visual_1>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_head_tilt_link_visual_1" (
                    prepend references = @./hsrb/materials/usd/M_head_tilt_link_visual_1.usda@</M_head_tilt_link_visual_1>
                )
                {
                }
            }
        }

        def Mesh "SM_head_tilt_link_visual_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/tablet_base.usda@</SM_Simulator_TabletBase_DR017_S0150_A_000>
        )
        {
            rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_2/Materials/M_head_tilt_link_visual_2>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/tablet_base.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_head_tilt_link_visual_2>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_head_tilt_link_visual_2" (
                    prepend references = @./hsrb/materials/usd/M_head_tilt_link_visual_2.usda@</M_head_tilt_link_visual_2>
                )
                {
                }
            }

            def GeomSubset "tablet_base" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257]
                rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_2/Materials/M_head_tilt_link_visual_2>
            }

            def GeomSubset "display" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269]
                rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_2/Materials/M_head_tilt_link_visual_2>
            }

            def GeomSubset "microphone" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303]
                rel material:binding = </hsrb/head_tilt_link/SM_head_tilt_link_visual_2/Materials/M_head_tilt_link_visual_2>
            }
        }

        def Mesh "SM_head_tilt_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/head.usda@</SM_head>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/head.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_head_tilt_link_collision_1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/tablet.usda@</SM_tablet>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/tablet.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "head_l_stereo_camera_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0347278589506459e-13, -1, 0, 0), (-1.0347278589506459e-13, 0, -1, 0), (1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (0.02, 0.07, 0.061, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_head_l_stereo_camera_link_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/head_camera.usda@</SM_Head_Camera>
            )
            {
                rel material:binding = </hsrb/head_tilt_link/head_l_stereo_camera_link/SM_head_l_stereo_camera_link_visual_0/Materials/M_head_l_stereo_camera_link_visual_0>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/head_camera.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_head_l_stereo_camera_link_visual_0>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_head_l_stereo_camera_link_visual_0" (
                        prepend references = @./hsrb/materials/usd/M_head_l_stereo_camera_link_visual_0.usda@</M_head_l_stereo_camera_link_visual_0>
                    )
                    {
                    }
                }
            }

            def Xform "head_l_stereo_camera_gazebo_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (-1.0347278589506459e-13, 0, 1, 0), (-1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (1.0347278589506459e-13, -1, 0, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "head_r_stereo_camera_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0347278589506459e-13, -1, 0, 0), (-1.0347278589506459e-13, 0, -1, 0), (1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (0.02, -0.07, 0.061, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_head_r_stereo_camera_link_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/head_camera.usda@</SM_Head_Camera>
            )
            {
                rel material:binding = </hsrb/head_tilt_link/head_r_stereo_camera_link/SM_head_r_stereo_camera_link_visual_0/Materials/M_head_r_stereo_camera_link_visual_0>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/head_camera.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_head_r_stereo_camera_link_visual_0>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_head_r_stereo_camera_link_visual_0" (
                        prepend references = @./hsrb/materials/usd/M_head_r_stereo_camera_link_visual_0.usda@</M_head_r_stereo_camera_link_visual_0>
                    )
                    {
                    }
                }
            }

            def Xform "head_r_stereo_camera_gazebo_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (-1.0347278589506459e-13, 0, 1, 0), (-1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (1.0347278589506459e-13, -1, 0, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "head_center_camera_frame" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0347278589506459e-13, -1, 0, 0), (-1.0347278589506459e-13, 0, -1, 0), (1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (0.0195, 0, 0.061, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "head_center_camera_gazebo_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (-1.0347278589506459e-13, 0, 1, 0), (-1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (1.0347278589506459e-13, -1, 0, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "head_rgbd_sensor_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0.022312526, 0.0030841334, -0.015074222)
            float3 physics:diagonalInertia = (0.00007308931, 0.00056047394, 0.0006000113)
            float physics:mass = 0.19291663
            quatf physics:principalAxes = (0.76910204, -0.6354176, 0.04338101, 0.053335547)
            float urdf:link:inertial:inertia:ixx = 0.00007308931
            float urdf:link:inertial:inertia:iyy = 0.00056047394
            float urdf:link:inertial:inertia:izz = 0.0006000113
            float urdf:link:inertial:mass = 0.19291663
            float3 urdf:link:inertial:origin:rpy = (-1.3791697, 0.13491848, 0.027160984)
            point3f urdf:link:inertial:origin:xyz = (0.022312526, 0.0030841334, -0.015074222)
            matrix4d xformOp:transform = ( (-1.0347278589506459e-13, -1, 0, 0), (-1.0347278589506459e-13, 0, -1, 0), (1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (-0.079796, 0.022, 0.215172, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_head_rgbd_sensor_link_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
                prepend references = @./hsrb/meshes/usd/rgbd_light.usda@</SM_Rgbd_006>
            )
            {
                rel material:binding = </hsrb/head_tilt_link/head_rgbd_sensor_link/SM_head_rgbd_sensor_link_visual_0/Materials/M_head_rgbd_sensor_link_visual_0>
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/rgbd_light.dae@
                rel urdf:visual:material = </urdf/robot/materials/M_head_rgbd_sensor_link_visual_0>
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_head_rgbd_sensor_link_visual_0" (
                        prepend references = @./hsrb/materials/usd/M_head_rgbd_sensor_link_visual_0.usda@</M_head_rgbd_sensor_link_visual_0>
                    )
                    {
                    }
                }
            }

            def Mesh "SM_head_rgbd_sensor_link_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./hsrb/meshes/usd/rgbd.usda@</SM_rgbd>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/rgbd.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "head_rgbd_sensor_gazebo_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (-1.0347278589506459e-13, 0, 1, 0), (-1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (1.0347278589506459e-13, -1, 0, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "arm_lift_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0.08132282, 0.026763054, -0.04826762)
        float3 physics:diagonalInertia = (0.000951215, 0.001749054, 0.0022147857)
        float physics:mass = 0.13693865
        quatf physics:principalAxes = (-0.27501568, 0.9039557, 0.13705114, -0.29740125)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000951215
        float urdf:link:inertial:inertia:iyy = 0.001749054
        float urdf:link:inertial:inertia:izz = 0.0022147857
        float urdf:link:inertial:mass = 0.13693865
        float3 urdf:link:inertial:origin:rpy = (-2.4305162, 0.480579, 0.48239693)
        point3f urdf:link:inertial:origin:xyz = (0.08132282, 0.026763054, -0.04826762)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.34, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_arm_lift_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/shoulder.usda@</SM_Shoulder>
        )
        {
            rel material:binding = </hsrb/arm_lift_link/SM_arm_lift_link_visual_0/Materials/M_arm_lift_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/shoulder.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_arm_lift_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_arm_lift_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_arm_lift_link_visual_0.usda@</M_arm_lift_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_arm_lift_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/shoulder.usda@</SM_Shoulder>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/shoulder.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_flex_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/arm_lift_link>
            rel physics:body1 = </hsrb/arm_flex_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.141, 0.078, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = -150.11494
            float physics:upperLimit = 0
            vector3f urdf:joint:axis = (0, -1, 0)
            prepend rel urdf:joint:child = </hsrb/arm_flex_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -2.62
            float urdf:joint:limit:upper = 0
            float urdf:joint:limit:velocity = 1.2
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.141, 0.078, 0)
            prepend rel urdf:joint:parent = </hsrb/arm_lift_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_flex_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.00045899014, 0.0065834117, 0.10606901)
        float3 physics:diagonalInertia = (0.0029768238, 0.036624577, 0.037757233)
        float physics:mass = 2.1093452
        quatf physics:principalAxes = (0.014751024, 0.7085752, -0.019227613, -0.70521903)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0029768238
        float urdf:link:inertial:inertia:iyy = 0.036624577
        float urdf:link:inertial:inertia:izz = 0.037757233
        float urdf:link:inertial:mass = 2.1093452
        float3 urdf:link:inertial:origin:rpy = (1.672416, 1.5225048, -1.4755094)
        point3f urdf:link:inertial:origin:xyz = (-0.00045899014, 0.0065834117, 0.10606901)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.141, 0.078, 0.34, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_arm_flex_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/arm_flex_light.usda@</SM_Arm_Flex_000>
        )
        {
            rel material:binding = </hsrb/arm_flex_link/SM_arm_flex_link_visual_0/Materials/M_arm_flex_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/arm_flex_light.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_arm_flex_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_arm_flex_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_arm_flex_link_visual_0.usda@</M_arm_flex_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_arm_flex_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/arm_flex.usda@</SM_arm_flex>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/arm_flex.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_roll_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/arm_flex_link>
            rel physics:body1 = </hsrb/arm_roll_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.005, 0, 0.345)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -119.74818
            float physics:upperLimit = 220.0158
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </hsrb/arm_roll_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -2.09
            float urdf:joint:limit:upper = 3.84
            float urdf:joint:limit:velocity = 2
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.005, 0, 0.345)
            prepend rel urdf:joint:parent = </hsrb/arm_flex_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_roll_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.004909096, 0.0034167392, -0.04720309)
        float3 physics:diagonalInertia = (0.00112568, 0.0036435395, 0.0040444317)
        float physics:mass = 0.9091
        quatf physics:principalAxes = (0.6738422, 0.032797303, 0.7376915, 0.025928548)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00112568
        float urdf:link:inertial:inertia:iyy = 0.0036435395
        float urdf:link:inertial:inertia:izz = 0.0040444317
        float urdf:link:inertial:mass = 0.9091
        float3 urdf:link:inertial:origin:rpy = (2.402835, 1.448037, 2.3931026)
        point3f urdf:link:inertial:origin:xyz = (-0.004909096, 0.0034167392, -0.04720309)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.146, 0.078, 0.685, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_arm_roll_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/arm_roll_light.usda@</SM_Arm_Roll_003>
        )
        {
            rel material:binding = </hsrb/arm_roll_link/SM_arm_roll_link_visual_0/Materials/M_arm_roll_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/arm_roll_light.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_arm_roll_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_arm_roll_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_arm_roll_link_visual_0.usda@</M_arm_roll_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_arm_roll_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/arm_roll.usda@</SM_arm_roll>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/arm_roll.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "wrist_flex_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/arm_roll_link>
            rel physics:body1 = </hsrb/wrist_flex_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = -110.0079
            float physics:upperLimit = 69.90085
            vector3f urdf:joint:axis = (0, -1, 0)
            prepend rel urdf:joint:child = </hsrb/wrist_flex_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -1.92
            float urdf:joint:limit:upper = 1.22
            float urdf:joint:limit:velocity = 1.5
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0, 0)
            prepend rel urdf:joint:parent = </hsrb/arm_roll_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "wrist_flex_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0.03)
        float3 physics:diagonalInertia = (0.0000052477794, 0.000040151263, 0.000040151263)
        float physics:mass = 0.036316812
        quatf physics:principalAxes = (0.70710677, 0, 0.70710677, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000052477794
        float urdf:link:inertial:inertia:iyy = 0.000040151263
        float urdf:link:inertial:inertia:izz = 0.000040151263
        float urdf:link:inertial:mass = 0.036316812
        float3 urdf:link:inertial:origin:rpy = (-0, 1.5707963, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0.03)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.146, 0.078, 0.685, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_wrist_flex_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/wrist_flex.usda@</SM_Wrist_Flex>
        )
        {
            rel material:binding = </hsrb/wrist_flex_link/SM_wrist_flex_link_visual_0/Materials/M_wrist_flex_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/wrist_flex.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_wrist_flex_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_wrist_flex_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_wrist_flex_link_visual_0.usda@</M_wrist_flex_link_visual_0>
                )
                {
                }
            }
        }

        def Cylinder "SM_wrist_flex_link_visual_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.017, -0.017, -0.01), (0.017, 0.017, 0.01)]
            double height = 0.02
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.017
            float urdf:geometry:cylinder:length = 0.02
            float urdf:geometry:cylinder:radius = 0.017
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0.04)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.04, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cylinder "SM_wrist_flex_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI"]
        )
        {
            float3[] extent = [(-0.017, -0.017, -0.02), (0.017, 0.017, 0.02)]
            double height = 0.04
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            double radius = 0.017
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0.03)
            float urdf:geometry:cylinder:length = 0.04
            float urdf:geometry:cylinder:radius = 0.017
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.03, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "wrist_roll_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/wrist_flex_link>
            rel physics:body1 = </hsrb/wrist_roll_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -110.0079
            float physics:upperLimit = 210.27551
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </hsrb/wrist_roll_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -1.92
            float urdf:joint:limit:upper = 3.67
            float urdf:joint:limit:velocity = 1.5
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0, 0)
            prepend rel urdf:joint:parent = </hsrb/wrist_flex_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "wrist_roll_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.010066617, -0.000024754852, 0.08849106)
        float3 physics:diagonalInertia = (0.00011161584, 0.0005890679, 0.0006139268)
        float physics:mass = 0.061498586
        quatf physics:principalAxes = (-0.65502787, 0.000020114949, 0.7556047, 0.00036204996)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00011161584
        float urdf:link:inertial:inertia:iyy = 0.0005890679
        float urdf:link:inertial:inertia:izz = 0.0006139268
        float urdf:link:inertial:mass = 0.061498586
        float3 urdf:link:inertial:origin:rpy = (3.137922, -1.4284382, -3.1384637)
        point3f urdf:link:inertial:origin:xyz = (-0.010066617, -0.000024754852, 0.08849106)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.146, 0.078, 0.685, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_wrist_roll_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI"]
            prepend references = @./hsrb/meshes/usd/wrist_roll.usda@</SM_Wrist_Roll>
        )
        {
            rel material:binding = </hsrb/wrist_roll_link/SM_wrist_roll_link_visual_0/Materials/M_wrist_roll_link_visual_0>
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/dae/wrist_roll.dae@
            rel urdf:visual:material = </urdf/robot/materials/M_wrist_roll_link_visual_0>
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_wrist_roll_link_visual_0" (
                    prepend references = @./hsrb/materials/usd/M_wrist_roll_link_visual_0.usda@</M_wrist_roll_link_visual_0>
                )
                {
                }
            }
        }

        def Mesh "SM_wrist_roll_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/wrist_roll.usda@</SM_Wrist_Roll>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/wrist_roll.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "wrist_ft_sensor_frame" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1, -2.0682310711021444e-13, 0), (0, 2.0682310711021444e-13, -1, 0), (0, 0, 0.0735, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "hand_palm_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0.0012877753, 0.00030466882, -0.024661114)
            float3 physics:diagonalInertia = (0.000030547217, 0.00007715255, 0.00009078017)
            float physics:mass = 0.08773984
            quatf physics:principalAxes = (-0.686098, -0.01048294, 0.7274027, 0.006707099)
            float urdf:link:inertial:inertia:ixx = 0.000030547217
            float urdf:link:inertial:inertia:iyy = 0.00007715255
            float urdf:link:inertial:inertia:izz = 0.00009078017
            float urdf:link:inertial:mass = 0.08773984
            float3 urdf:link:inertial:origin:rpy = (2.7498908, -1.5075153, -2.7445483)
            point3f urdf:link:inertial:origin:xyz = (0.0012877753, 0.00030466882, -0.024661114)
            matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.012, 0, 0.1405, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_hand_palm_link_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./hsrb/meshes/usd/palm.usda@</SM_palm>
            )
            {
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/palm.stl@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_hand_palm_link_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./hsrb/meshes/usd/palm.usda@</SM_palm>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/palm.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def PhysicsRevoluteJoint "hand_motor_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/wrist_roll_link/hand_palm_link>
                rel physics:body1 = </hsrb/hand_motor_dummy_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
                quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                float physics:lowerLimit = -45.72203
                float physics:upperLimit = 71.04677
                vector3f urdf:joint:axis = (1, 0, 0)
                prepend rel urdf:joint:child = </hsrb/hand_motor_dummy_link>
                float urdf:joint:limit:effort = 100
                float urdf:joint:limit:lower = -0.798
                float urdf:joint:limit:upper = 1.24
                float urdf:joint:limit:velocity = 1
                prepend rel urdf:joint:parent = </hsrb/wrist_roll_link/hand_palm_link>
                uniform token urdf:joint:type = "revolute"
            }

            def PhysicsRevoluteJoint "hand_l_proximal_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/wrist_roll_link/hand_palm_link>
                rel physics:body1 = </hsrb/hand_l_proximal_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.01675, -0.0245, -0.0175)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
                quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                float physics:lowerLimit = -45.72203
                float physics:upperLimit = 71.04677
                vector3f urdf:joint:axis = (1, 0, 0)
                prepend rel urdf:joint:child = </hsrb/hand_l_proximal_link>
                float urdf:joint:limit:effort = 100
                float urdf:joint:limit:lower = -0.798
                float urdf:joint:limit:upper = 1.24
                float urdf:joint:limit:velocity = 1
                prepend rel urdf:joint:mimic:joint = </hsrb/wrist_roll_link/hand_palm_link/hand_motor_joint>
                float urdf:joint:mimic:multiplier = 1
                float urdf:joint:mimic:offset = 0
                float3 urdf:joint:origin:rpy = (0, 0, 0)
                point3f urdf:joint:origin:xyz = (-0.01675, -0.0245, -0.0175)
                prepend rel urdf:joint:parent = </hsrb/wrist_roll_link/hand_palm_link>
                uniform token urdf:joint:type = "revolute"
            }

            def PhysicsRevoluteJoint "hand_r_proximal_joint" (
                prepend apiSchemas = ["UrdfJointAPI"]
            )
            {
                uniform token physics:axis = "Z"
                rel physics:body0 = </hsrb/wrist_roll_link/hand_palm_link>
                rel physics:body1 = </hsrb/hand_r_proximal_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.01675, 0.0245, -0.0175)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
                quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                float physics:lowerLimit = -45.72203
                float physics:upperLimit = 71.04677
                vector3f urdf:joint:axis = (-1, 0, 0)
                prepend rel urdf:joint:child = </hsrb/hand_r_proximal_link>
                float urdf:joint:limit:effort = 100
                float urdf:joint:limit:lower = -0.798
                float urdf:joint:limit:upper = 1.24
                float urdf:joint:limit:velocity = 1
                prepend rel urdf:joint:mimic:joint = </hsrb/wrist_roll_link/hand_palm_link/hand_motor_joint>
                float urdf:joint:mimic:multiplier = 1
                float urdf:joint:mimic:offset = 0
                float3 urdf:joint:origin:rpy = (0, 0, 0)
                point3f urdf:joint:origin:xyz = (-0.01675, 0.0245, -0.0175)
                prepend rel urdf:joint:parent = </hsrb/wrist_roll_link/hand_palm_link>
                uniform token urdf:joint:type = "revolute"
            }

            def Xform "hand_camera_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.039, 0, -0.0045, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "hand_camera_gazebo_frame" (
                    prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
                )
                {
                    point3f physics:centerOfMass = (0, 0, 0)
                    float3 physics:diagonalInertia = (0, 0, 0)
                    float physics:mass = 0
                    quatf physics:principalAxes = (1, 0, 0, 0)
                    float urdf:link:inertial:inertia:ixx = 0
                    float urdf:link:inertial:inertia:iyy = 0
                    float urdf:link:inertial:inertia:izz = 0
                    float urdf:link:inertial:mass = 0
                    float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                    point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (-1.0347278589506459e-13, 0, 1, 0), (-1, -1.0347278589506459e-13, -1.0347278589506459e-13, 0), (1.0347278589506459e-13, -1, 0, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "hand_gripper_tool_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
            )
            {
                point3f physics:centerOfMass = (0, 0, 0)
                float3 physics:diagonalInertia = (0, 0, 0)
                float physics:mass = 0
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0
                float urdf:link:inertial:inertia:iyy = 0
                float urdf:link:inertial:inertia:izz = 0
                float urdf:link:inertial:mass = 0
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.07, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "hand_motor_dummy_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.158, 0.078, 0.8255000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Xform "hand_l_proximal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17474999999999494, 0.10250000000000346, 0.8080000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "hand_l_spring_proximal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_l_proximal_link>
            rel physics:body1 = </hsrb/hand_l_spring_proximal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 39.992455
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_l_spring_proximal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = 0
            float urdf:joint:limit:upper = 0.698
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:parent = </hsrb/hand_l_proximal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_l_spring_proximal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0.018756786, -0.0022016808, 0.030663585)
        float3 physics:diagonalInertia = (0.000008607574, 0.00007024006, 0.00007688956)
        float physics:mass = 0.042135075
        quatf physics:principalAxes = (-0.5874429, 0.6060452, 0.3529997, 0.40374663)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000008607574
        float urdf:link:inertial:inertia:iyy = 0.00007024006
        float urdf:link:inertial:inertia:izz = 0.00007688956
        float urdf:link:inertial:mass = 0.042135075
        float3 urdf:link:inertial:origin:rpy = (-1.5328722, -1.1292962, -0.10901301)
        point3f urdf:link:inertial:origin:xyz = (0.018756786, -0.0022016808, 0.030663585)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17474999999999494, 0.10250000000000346, 0.8080000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_hand_l_spring_proximal_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/l_proximal.usda@</SM_l_proximal>
        )
        {
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/l_proximal.stl@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_hand_l_spring_proximal_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/l_proximal.usda@</SM_l_proximal>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/l_proximal.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "hand_l_mimic_distal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_l_spring_proximal_link>
            rel physics:body1 = </hsrb/hand_l_mimic_distal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.07)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = -39.992455
            float physics:upperLimit = -0
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_l_mimic_distal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -0.698
            float urdf:joint:limit:upper = -0
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:mimic:joint = </hsrb/hand_l_proximal_link/hand_l_spring_proximal_joint>
            float urdf:joint:mimic:multiplier = -1
            float urdf:joint:mimic:offset = 0
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0, 0.07)
            prepend rel urdf:joint:parent = </hsrb/hand_l_spring_proximal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_l_mimic_distal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17474999999999494, 0.10250000000000346, 0.8780000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "hand_l_distal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_l_mimic_distal_link>
            rel physics:body1 = </hsrb/hand_l_distal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = -71.04677
            float physics:upperLimit = 45.72203
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_l_distal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -1.24
            float urdf:joint:limit:upper = 0.798
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:mimic:joint = </hsrb/wrist_roll_link/hand_palm_link/hand_motor_joint>
            float urdf:joint:mimic:multiplier = -1
            float urdf:joint:mimic:offset = -0.087
            prepend rel urdf:joint:parent = </hsrb/hand_l_mimic_distal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_l_distal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0.015250046, 0.0044316775, 0.01933372)
        float3 physics:diagonalInertia = (0.000006055272, 0.000027122727, 0.000029451308)
        float physics:mass = 0.03458766
        quatf physics:principalAxes = (0.3817766, 0.23210615, 0.6331768, -0.6320289)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000006055272
        float urdf:link:inertial:inertia:iyy = 0.000027122727
        float urdf:link:inertial:inertia:izz = 0.000029451308
        float urdf:link:inertial:mass = 0.03458766
        float3 urdf:link:inertial:origin:rpy = (-1.4266876, 0.8896633, -2.8373044)
        point3f urdf:link:inertial:origin:xyz = (0.015250046, 0.0044316775, 0.01933372)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17474999999999494, 0.10250000000000346, 0.8780000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_hand_l_distal_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/l_distal.usda@</SM_l_distal>
        )
        {
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/l_distal.stl@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_hand_l_distal_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/l_distal.usda@</SM_l_distal>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/l_distal.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "hand_l_finger_tip_frame" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, -1, 0), (0, 1, -1.0347278589506459e-13, 0), (0.01675, 0.0193, 0.0379, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "hand_l_finger_vacuum_frame" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.707106781186511, 0.7071067811865841, 0), (0, -0.7071067811865841, 0.707106781186511, 0), (0.00475, -0.011539, 0.03322, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cube "SM_hand_l_finger_vacuum_frame_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:geometry:box:size = (0.008, 0.008, 0.02)
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, -0.01)
                matrix4d xformOp:transform = ( (0.004, 0, 0, 0), (0, 0.004, 0, 0), (0, 0, 0.01, 0), (0, 0, -0.01, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "hand_r_proximal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17475000000000507, 0.05350000000000346, 0.8080000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "hand_r_spring_proximal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_r_proximal_link>
            rel physics:body1 = </hsrb/hand_r_spring_proximal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 39.992455
            vector3f urdf:joint:axis = (-1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_r_spring_proximal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = 0
            float urdf:joint:limit:upper = 0.698
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:parent = </hsrb/hand_r_proximal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_r_spring_proximal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0.018127676, 0.0021659941, 0.03085762)
        float3 physics:diagonalInertia = (0.000007921277, 0.00006877347, 0.00007483594)
        float physics:mass = 0.041479956
        quatf physics:principalAxes = (0.6110667, -0.5782454, -0.41146028, -0.35061404)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000007921277
        float urdf:link:inertial:inertia:iyy = 0.00006877347
        float urdf:link:inertial:inertia:izz = 0.00007483594
        float urdf:link:inertial:mass = 0.041479956
        float3 urdf:link:inertial:origin:rpy = (-1.5883344, -1.1393007, 0.11346551)
        point3f urdf:link:inertial:origin:xyz = (0.018127676, 0.0021659941, 0.03085762)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17475000000000507, 0.05350000000000346, 0.8080000000000002, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_hand_r_spring_proximal_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/r_proximal.usda@</SM_r_proximal>
        )
        {
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/r_proximal.stl@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_hand_r_spring_proximal_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/r_proximal.usda@</SM_r_proximal>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/r_proximal.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "hand_r_mimic_distal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_r_spring_proximal_link>
            rel physics:body1 = </hsrb/hand_r_mimic_distal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.07)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = -39.992455
            float physics:upperLimit = -0
            vector3f urdf:joint:axis = (-1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_r_mimic_distal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -0.698
            float urdf:joint:limit:upper = -0
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:mimic:joint = </hsrb/hand_r_proximal_link/hand_r_spring_proximal_joint>
            float urdf:joint:mimic:multiplier = -1
            float urdf:joint:mimic:offset = 0
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0, 0.07)
            prepend rel urdf:joint:parent = </hsrb/hand_r_spring_proximal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_r_mimic_distal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17475000000000507, 0.05350000000000346, 0.8780000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "hand_r_distal_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </hsrb/hand_r_mimic_distal_link>
            rel physics:body1 = </hsrb/hand_r_distal_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, -0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
            float physics:lowerLimit = -71.04677
            float physics:upperLimit = 45.72203
            vector3f urdf:joint:axis = (-1, 0, 0)
            prepend rel urdf:joint:child = </hsrb/hand_r_distal_link>
            float urdf:joint:limit:effort = 100
            float urdf:joint:limit:lower = -1.24
            float urdf:joint:limit:upper = 0.798
            float urdf:joint:limit:velocity = 1
            prepend rel urdf:joint:mimic:joint = </hsrb/wrist_roll_link/hand_palm_link/hand_motor_joint>
            float urdf:joint:mimic:multiplier = -1
            float urdf:joint:mimic:offset = -0.087
            prepend rel urdf:joint:parent = </hsrb/hand_r_mimic_distal_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "hand_r_distal_link" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0.017135125, -0.007652598, 0.01713945)
        float3 physics:diagonalInertia = (0.0000034508703, 0.000019094665, 0.000021310003)
        float physics:mass = 0.024421629
        quatf physics:principalAxes = (0.21702278, 0.34573823, 0.7525501, -0.51675385)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000034508703
        float urdf:link:inertial:inertia:iyy = 0.000019094665
        float urdf:link:inertial:inertia:izz = 0.000021310003
        float urdf:link:inertial:mass = 0.024421629
        float3 urdf:link:inertial:origin:rpy = (-2.1054716, 0.7531828, 2.723681)
        point3f urdf:link:inertial:origin:xyz = (0.017135125, -0.007652598, 0.01713945)
        matrix4d xformOp:transform = ( (-1, -2.0682310711021444e-13, 0, 0), (2.0682310711021444e-13, -1, 0, 0), (0, 0, 1, 0), (0.17475000000000507, 0.05350000000000346, 0.8780000000000001, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_hand_r_distal_link_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/r_distal.usda@</SM_r_distal>
        )
        {
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/r_distal.stl@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_hand_r_distal_link_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./hsrb/meshes/usd/r_distal.usda@</SM_r_distal>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.78431374, 0.78431374, 0.78431374)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @.//hsrb/cache/syhSv5ZF5I/hsrb/meshes/stl/r_distal.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "hand_r_finger_tip_frame" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0347278589506459e-13, 1, 0), (0, -1, -1.0347278589506459e-13, 0), (0.01675, -0.0193, 0.0379, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}


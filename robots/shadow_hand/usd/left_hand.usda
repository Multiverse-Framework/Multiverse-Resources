#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-0.13087802006276977, -0.46302121632191123, 0.17117030573781147)
                double3 target = (0.032326402834213036, -0.007042281805065609, 0.0724764466141142)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./left_hand.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "left_hand"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def "Render" (
    hide_in_stage_window = true
    no_delete = true
)
{
    def "OmniverseKit"
    {
        def "HydraTextures" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            def RenderProduct "omni_kit_widget_viewport_ViewportTexture_0" (
                prepend apiSchemas = ["OmniRtxSettingsCommonAdvancedAPI_1", "OmniRtxSettingsRtAdvancedAPI_1", "OmniRtxSettingsPtAdvancedAPI_1", "OmniRtxPostColorGradingAPI_1", "OmniRtxPostChromaticAberrationAPI_1", "OmniRtxPostBloomPhysicalAPI_1", "OmniRtxPostMatteObjectAPI_1", "OmniRtxPostCompositingAPI_1", "OmniRtxPostDofAPI_1", "OmniRtxPostMotionBlurAPI_1", "OmniRtxPostTvNoiseAPI_1", "OmniRtxPostTonemapIrayReinhardAPI_1", "OmniRtxPostDebugSettingsAPI_1", "OmniRtxDebugSettingsAPI_1"]
                hide_in_stage_window = true
                no_delete = true
            )
            {
                rel camera = </OmniverseKit_Persp>
                token omni:rtx:background:source:texture:textureMode = "repeatMirrored"
                token omni:rtx:background:source:type = "domeLight"
                bool omni:rtx:dlss:frameGeneration = 0
                string omni:rtx:material:db:rtSensorNameToIdMap = "DefaultMaterial:0;AsphaltStandardMaterial:1;AsphaltWeatheredMaterial:2;VegetationGrassMaterial:3;WaterStandardMaterial:4;GlassStandardMaterial:5;FiberGlassMaterial:6;MetalAlloyMaterial:7;MetalAluminumMaterial:8;MetalAluminumOxidizedMaterial:9;PlasticStandardMaterial:10;RetroMarkingsMaterial:11;RetroSignMaterial:12;RubberStandardMaterial:13;SoilClayMaterial:14;ConcreteRoughMaterial:15;ConcreteSmoothMaterial:16;OakTreeBarkMaterial:17;FabricStandardMaterial:18;PlexiGlassStandardMaterial:19;MetalSilverMaterial:20"
                bool omni:rtx:material:db:syncLoads = 1
                bool omni:rtx:post:registeredCompositing:invertColorCorrection = 1
                bool omni:rtx:post:registeredCompositing:invertToneMap = 1
                bool omni:rtx:pt:lightcache:cached:dontResolveConflicts = 1
                int omni:rtx:pt:maxSamplesPerLaunch = 2073600
                int omni:rtx:pt:mgpu:maxPixelsPerRegionExponent = 12
                color3f omni:rtx:rt:ambientLight:color = (0.1, 0.1, 0.1)
                bool omni:rtx:rt:demoire = 0
                bool omni:rtx:rt:ecoMode:enabled
                bool omni:rtx:rt:lightcache:spatialCache:dontResolveConflicts = 1
                bool omni:rtx:scene:hydra:materialSyncLoads = 1
                bool omni:rtx:scene:hydra:mdlMaterialWarmup = 1
                uint omni:rtx:viewTile:limit = 4294967295
                rel orderedVars = </Render/Vars/LdrColor>
                custom bool overrideClipRange = 0
                uniform int2 resolution = (1280, 720)
            }
        }
    }

    def RenderSettings "OmniverseGlobalRenderSettings" (
        prepend apiSchemas = ["OmniRtxSettingsGlobalRtAdvancedAPI_1", "OmniRtxSettingsGlobalPtAdvancedAPI_1"]
        no_delete = true
    )
    {
        rel products = </Render/OmniverseKit/HydraTextures/omni_kit_widget_viewport_ViewportTexture_0>
    }

    def "Vars"
    {
        def RenderVar "LdrColor" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            uniform string sourceName = "LdrColor"
        }
    }
}

def Xform "left_hand" (
    variants = {
        string Physics = "PhysX"
        string Sensor = "Sensors"
    }
    prepend variantSets = ["Physics", "Sensor"]
)
{
    over "lh_palm"
    {
        string isaac:namespace (
            displayName = "Namespace"
            doc = "Namespace of the prim in Isaac Sim"
        )

        over "lh_palm"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
            bool physics:rigidBodyEnabled = 1
            bool physxRigidBody:disableGravity = 0
        }

        over "lh_ffknuckle"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_ffproximal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_ffmiddle"
        {
        }

        over "lh_ffdistal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_mfknuckle"
        {
        }

        over "lh_mfproximal"
        {
        }

        over "lh_mfmiddle"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_mfdistal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_rfknuckle"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_rfproximal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_rfmiddle"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_rfdistal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )

            over "visuals"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        over "lh_lfmetacarpal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_lfknuckle"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_lfproximal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_lfmiddle"
        {
        }

        over "lh_lfdistal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_thbase"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_thproximal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_thhub"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }

        over "lh_thmiddle"
        {
        }

        over "lh_thdistal"
        {
            string isaac:nameOverride (
                displayName = "Name Override"
                doc = "Name override for prim lookup in base name search"
            )
        }
    }

    over "joints"
    {
        over "lh_RFJ2" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_FFJ4" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_FFJ3" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_FFJ2" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_FFJ1" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_MFJ4" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_MFJ3" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_MFJ2" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_MFJ1" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_RFJ4" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_RFJ3" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_RFJ1" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_LFJ5" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_LFJ4" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_LFJ3" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_LFJ2" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_LFJ1" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_THJ5" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_THJ4" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_THJ3" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_THJ2" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }

        over "lh_THJ1" (
            prepend apiSchemas = ["PhysxLimitAPI:angular"]
        )
        {
            float drive:angular:physics:damping = 0
            float drive:angular:physics:maxForce = inf
            float physxLimit:angular:damping = 0.05
        }
    }
    variantSet "Physics" = {
        "None" (
            prepend references = @configuration/left_hand_base.usd@
        ) {
            over "joints" (
                active = false
            )
            {
            }

        }
        "PhysX" (
            prepend payload = @configuration/left_hand_physics.usd@
        ) {

        }
    }
    variantSet "Sensor" = {
        "None" {

        }
        "Sensors" (
            prepend payload = @configuration/left_hand_sensor.usd@
        ) {

        }
    }
}


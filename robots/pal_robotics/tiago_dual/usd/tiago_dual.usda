#usda 1.0
(
    defaultPrim = "tiago_dual"
    metersPerUnit = 1
    upAxis = "Z"
)

def Urdf "urdf"
{
    string urdf:name = "tiago_dual"

    def UrdfRobot "robot"
    {
        def UrdfMaterial "materials"
        {
            def UrdfMaterial "M_White"
            {
                color4f urdf:material:rgba = (1, 1, 1, 1)
            }

            def UrdfMaterial "M_DarkGrey"
            {
                color4f urdf:material:rgba = (0.1, 0.1, 0.1, 1)
            }

            def UrdfMaterial "M_Black"
            {
                color4f urdf:material:rgba = (0, 0, 0, 1)
            }

            def UrdfMaterial "M_Grey"
            {
                color4f urdf:material:rgba = (0.7, 0.7, 0.7, 1)
            }

            def UrdfMaterial "M_LightGrey"
            {
                color4f urdf:material:rgba = (0.9, 0.9, 0.9, 1)
            }

            def UrdfMaterial "M_Orange"
            {
                color4f urdf:material:rgba = (1, 0.487, 0, 1)
            }
        }
    }
}

def Xform "tiago_dual" (
    prepend apiSchemas = ["MujocoBodyAPI"]
)
{
    point3f mujoco:body:pos = (0, 0, 0)
    quatf mujoco:body:quat = (1, 0, 0, 0)

    def Xform "base_footprint" (
        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.1943179, 0.2107838, 0.24757026)
            float mujoco:body:inertial:mass = 4.5830097
            point3f mujoco:body:inertial:pos = (0.008795303, 0.0000489176, 0.18509966)
            quatf mujoco:body:inertial:quat = (0.99999696, -0.0009502367, 0.0022169813, -0.00054872973)
            point3f mujoco:body:pos = (0, 0, 0.0985)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (0.008795303, 0.0000489176, 0.18509966)
            float3 physics:diagonalInertia = (0.1943179, 0.2107838, 0.24757026)
            float physics:mass = 4.5830097
            quatf physics:principalAxes = (0.99999696, -0.0009502367, 0.0022169813, -0.00054872973)
            float urdf:link:inertial:inertia:ixx = 0.1943179
            float urdf:link:inertial:inertia:iyy = 0.2107838
            float urdf:link:inertial:inertia:izz = 0.24757026
            float urdf:link:inertial:mass = 4.5830097
            float3 urdf:link:inertial:origin:rpy = (-0.0019029204, 0.0044329204, -0.0011016804)
            point3f urdf:link:inertial:origin:xyz = (0.008795303, 0.0000489176, 0.18509966)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.0985, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "base_link_geom_visual_0_base" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./../assets/meshes/usd/base.usda@</base>
            )
            {
                rel material:binding = </tiago_dual/base_footprint/base_link/base_link_geom_visual_0_base/Materials/M_White>
                rel mujoco:geom:material = </mujoco/asset/materials/M_White>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/base>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/base.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/M_White>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_White" (
                        prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                    )
                    {
                    }
                }
            }

            def Mesh "base_link_geom_collision_0_base_collision" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./../assets/meshes/usd/base_collision.usda@</base_collision>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/base_collision>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/base_collision.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "base_laser_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (0.00013584904, 0.00042235898, 0.0004473045)
                float mujoco:body:inertial:mass = 0.22902466
                point3f mujoco:body:inertial:pos = (0.19790408, -0.000057445544, -0.036562536)
                quatf mujoco:body:inertial:quat = (0.46188903, 0.4548055, 0.5411882, -0.5356546)
                point3f mujoco:body:pos = (0.202, 0, -0.004)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (0.19790408, -0.000057445544, -0.036562536)
                float3 physics:diagonalInertia = (0.00013584904, 0.00042235898, 0.0004473045)
                float physics:mass = 0.22902466
                quatf physics:principalAxes = (0.46188903, 0.4548055, 0.5411882, -0.5356546)
                float urdf:link:inertial:inertia:ixx = 0.00013584904
                float urdf:link:inertial:inertia:iyy = 0.00042235898
                float urdf:link:inertial:inertia:izz = 0.0004473045
                float urdf:link:inertial:mass = 0.22902466
                float3 urdf:link:inertial:origin:rpy = (-1.5674473, 1.4104689, -3.1255858)
                point3f urdf:link:inertial:origin:xyz = (0.19790408, -0.000057445544, -0.036562536)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.202, 0, -0.004, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_laser_link_geom_visual_0_sick_tim551" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/sick_tim551.usda@</sick_tim551>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_laser_link/base_laser_link_geom_visual_0_sick_tim551/Materials/M_DarkGrey>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/sick_tim551>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/sick_tim551.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_DarkGrey" (
                            prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                        )
                        {
                        }
                    }
                }
            }

            def Xform "base_sonar_03_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float mujoco:body:inertial:mass = 0.0032655923
                point3f mujoco:body:inertial:pos = (-0.17975225, 0.17976524, 0.17299764)
                quatf mujoco:body:inertial:quat = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                point3f mujoco:body:pos = (-0.183, 0.183, 0.173)
                quatf mujoco:body:quat = (0.38268343, 0, 0, 0.9238795)
                point3f physics:centerOfMass = (-0.17975225, 0.17976524, 0.17299764)
                float3 physics:diagonalInertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float physics:mass = 0.0032655923
                quatf physics:principalAxes = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                float urdf:link:inertial:inertia:ixx = 1.5969528e-7
                float urdf:link:inertial:inertia:iyy = 6.3599924e-7
                float urdf:link:inertial:inertia:izz = 6.706198e-7
                float urdf:link:inertial:mass = 0.0032655923
                float3 urdf:link:inertial:origin:rpy = (0.005938957, -0.001919521, 1.5702385)
                point3f urdf:link:inertial:origin:xyz = (-0.17975225, 0.17976524, 0.17299764)
                matrix4d xformOp:transform = ( (-0.7071067811865475, 0.7071067811865477, 0, 0), (-0.7071067811865477, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (-0.183, 0.183, 0.173, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_sonar_03_link_geom_visual_0_srf05" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/srf05.usda@</srf05>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_sonar_03_link/base_sonar_03_link_geom_visual_0_srf05/Materials/M_DarkGrey>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/srf05>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/srf05.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_DarkGrey" (
                            prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                        )
                        {
                        }
                    }
                }
            }

            def Xform "base_sonar_02_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float mujoco:body:inertial:mass = 0.0032655923
                point3f mujoco:body:inertial:pos = (-0.25441617, 0.000009185492, 0.17299764)
                quatf mujoco:body:inertial:quat = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                point3f mujoco:body:pos = (-0.259, 0, 0.173)
                quatf mujoco:body:quat = (6.123234e-17, 0, 0, 1)
                point3f physics:centerOfMass = (-0.25441617, 0.000009185492, 0.17299764)
                float3 physics:diagonalInertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float physics:mass = 0.0032655923
                quatf physics:principalAxes = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                float urdf:link:inertial:inertia:ixx = 1.5969528e-7
                float urdf:link:inertial:inertia:iyy = 6.3599924e-7
                float urdf:link:inertial:inertia:izz = 6.706198e-7
                float urdf:link:inertial:mass = 0.0032655923
                float3 urdf:link:inertial:origin:rpy = (0.005938957, -0.001919521, 1.5702385)
                point3f urdf:link:inertial:origin:xyz = (-0.25441617, 0.000009185492, 0.17299764)
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (-0.259, 0, 0.173, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_sonar_02_link_geom_visual_0_srf05" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/srf05.usda@</srf05>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_sonar_02_link/base_sonar_02_link_geom_visual_0_srf05/Materials/M_DarkGrey>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/srf05>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/srf05.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_DarkGrey" (
                            prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                        )
                        {
                        }
                    }
                }
            }

            def Xform "base_sonar_01_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float mujoco:body:inertial:mass = 0.0032655923
                point3f mujoco:body:inertial:pos = (-0.17976524, -0.17975225, 0.17299764)
                quatf mujoco:body:inertial:quat = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                point3f mujoco:body:pos = (-0.183, -0.183, 0.173)
                quatf mujoco:body:quat = (-0.38268343, 0, 0, 0.9238795)
                point3f physics:centerOfMass = (-0.17976524, -0.17975225, 0.17299764)
                float3 physics:diagonalInertia = (1.5969528e-7, 6.3599924e-7, 6.706198e-7)
                float physics:mass = 0.0032655923
                quatf physics:principalAxes = (0.7072985, 0.0027787806, 0.0014203093, 0.7069081)
                float urdf:link:inertial:inertia:ixx = 1.5969528e-7
                float urdf:link:inertial:inertia:iyy = 6.3599924e-7
                float urdf:link:inertial:inertia:izz = 6.706198e-7
                float urdf:link:inertial:mass = 0.0032655923
                float3 urdf:link:inertial:origin:rpy = (0.005938957, -0.001919521, 1.5702385)
                point3f urdf:link:inertial:origin:xyz = (-0.17976524, -0.17975225, 0.17299764)
                matrix4d xformOp:transform = ( (-0.7071067811865475, -0.7071067811865477, 0, 0), (0.7071067811865477, -0.7071067811865475, 0, 0), (0, -0, 1, 0), (-0.183, -0.183, 0.173, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_sonar_01_link_geom_visual_0_srf05" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/srf05.usda@</srf05>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_sonar_01_link/base_sonar_01_link_geom_visual_0_srf05/Materials/M_DarkGrey>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/srf05>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/srf05.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_DarkGrey" (
                            prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                        )
                        {
                        }
                    }
                }
            }

            def Xform "base_mic_front_left_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (0.23182, 0.03902, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.23182, 0.03902, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "base_mic_front_right_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (0.23182, -0.03902, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.23182, -0.03902, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "base_mic_back_left_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (-0.1082, -0.0599, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1082, -0.0599, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "base_mic_back_right_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (-0.1082, -0.13789, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1082, -0.13789, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "base_antenna_left_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (4.405028e-7, 0.0002167978, 0.00021680168)
                float mujoco:body:inertial:mass = 0.028692402
                point3f mujoco:body:inertial:pos = (-0.20105349, 0.10620015, 0.26649722)
                quatf mujoco:body:inertial:quat = (-0.001454261, 0.7070494, 0.0014557812, 0.7071611)
                point3f mujoco:body:pos = (-0.201, 0.1062, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.20105349, 0.10620015, 0.26649722)
                float3 physics:diagonalInertia = (4.405028e-7, 0.0002167978, 0.00021680168)
                float physics:mass = 0.028692402
                quatf physics:principalAxes = (-0.001454261, 0.7070494, 0.0014557812, 0.7071611)
                float urdf:link:inertial:inertia:ixx = 4.405028e-7
                float urdf:link:inertial:inertia:iyy = 0.0002167978
                float urdf:link:inertial:inertia:izz = 0.00021680168
                float urdf:link:inertial:mass = 0.028692402
                float3 urdf:link:inertial:origin:rpy = (0.015666213, -1.5706383, 3.1300418)
                point3f urdf:link:inertial:origin:xyz = (-0.20105349, 0.10620015, 0.26649722)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.201, 0.1062, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_antenna_left_link_geom_visual_0_antenna" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/antenna.usda@</antenna>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_antenna_left_link/base_antenna_left_link_geom_visual_0_antenna/Materials/M_Black>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/antenna>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/antenna.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_Black>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_Black" (
                            prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                        )
                        {
                        }
                    }
                }

                def Cylinder "base_antenna_left_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.005, -0.005, -0.085), (0.005, 0.005, 0.085)]
                    double height = 0.17
                    point3f mujoco:geom:pos = (0, 0, 0.085)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.005, 0.085, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.005
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0.085)
                    float urdf:geometry:cylinder:length = 0.17
                    float urdf:geometry:cylinder:radius = 0.005
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.085, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "base_antenna_right_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (4.405028e-7, 0.0002167978, 0.00021680168)
                float mujoco:body:inertial:mass = 0.028692402
                point3f mujoco:body:inertial:pos = (-0.20105349, -0.10619985, 0.26649722)
                quatf mujoco:body:inertial:quat = (-0.001454261, 0.7070494, 0.0014557812, 0.7071611)
                point3f mujoco:body:pos = (-0.201, -0.1062, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.20105349, -0.10619985, 0.26649722)
                float3 physics:diagonalInertia = (4.405028e-7, 0.0002167978, 0.00021680168)
                float physics:mass = 0.028692402
                quatf physics:principalAxes = (-0.001454261, 0.7070494, 0.0014557812, 0.7071611)
                float urdf:link:inertial:inertia:ixx = 4.405028e-7
                float urdf:link:inertial:inertia:iyy = 0.0002167978
                float urdf:link:inertial:inertia:izz = 0.00021680168
                float urdf:link:inertial:mass = 0.028692402
                float3 urdf:link:inertial:origin:rpy = (0.015666213, -1.5706383, 3.1300418)
                point3f urdf:link:inertial:origin:xyz = (-0.20105349, -0.10619985, 0.26649722)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.201, -0.1062, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "base_antenna_right_link_geom_visual_0_antenna" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/antenna.usda@</antenna>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/base_antenna_right_link/base_antenna_right_link_geom_visual_0_antenna/Materials/M_Black>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/antenna>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/antenna.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_Black>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_Black" (
                            prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                        )
                        {
                        }
                    }
                }

                def Cylinder "base_antenna_right_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.005, -0.005, -0.085), (0.005, 0.005, 0.085)]
                    double height = 0.17
                    point3f mujoco:geom:pos = (0, 0, 0.085)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.005, 0.085, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.005
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0.085)
                    float urdf:geometry:cylinder:length = 0.17
                    float urdf:geometry:cylinder:radius = 0.005
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.085, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "base_imu_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (0.10171, 0, 0.11282)
                quatf mujoco:body:quat = (0.70710677, 0, 0, -0.70710677)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0.10171, 0, 0.11282, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def PhysicsPrismaticJoint "suspension_right_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                float2 mujoco:joint:range = (-0.005, 0.005)
                uniform token mujoco:joint:type = "slide"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/suspension_right_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -0.005
                float physics:upperLimit = 0.005
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/suspension_right_link>
                float urdf:joint:limit:effort = 1000
                float urdf:joint:limit:lower = -0.005
                float urdf:joint:limit:upper = 0.005
                float urdf:joint:limit:velocity = 1000
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (0, 0, 0)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "prismatic"
            }

            def PhysicsPrismaticJoint "suspension_left_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                float2 mujoco:joint:range = (-0.005, 0.005)
                uniform token mujoco:joint:type = "slide"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/suspension_left_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physics:lowerLimit = -0.005
                float physics:upperLimit = 0.005
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/suspension_left_link>
                float urdf:joint:limit:effort = 1000
                float urdf:joint:limit:lower = -0.005
                float urdf:joint:limit:upper = 0.005
                float urdf:joint:limit:velocity = 1000
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (0, 0, 0)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "prismatic"
            }

            def PhysicsRevoluteJoint "caster_front_right_1_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                uniform token mujoco:joint:type = "hinge"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/caster_front_right_1_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0.1695, -0.102, -0.0335)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/caster_front_right_1_link>
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (0.1695, -0.102, -0.0335)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "continuous"
            }

            def PhysicsRevoluteJoint "caster_front_left_1_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                uniform token mujoco:joint:type = "hinge"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/caster_front_left_1_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (0.1695, 0.102, -0.0335)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/caster_front_left_1_link>
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (0.1695, 0.102, -0.0335)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "continuous"
            }

            def PhysicsRevoluteJoint "caster_back_right_1_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                uniform token mujoco:joint:type = "hinge"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/caster_back_right_1_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.1735, -0.102, -0.0335)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/caster_back_right_1_link>
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (-0.1735, -0.102, -0.0335)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "continuous"
            }

            def PhysicsRevoluteJoint "caster_back_left_1_joint" (
                prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
            )
            {
                vector3f mujoco:joint:axis = (0, 0, 1)
                point3f mujoco:joint:pos = (0, 0, 0)
                uniform token mujoco:joint:type = "hinge"
                uniform token physics:axis = "Z"
                rel physics:body0 = </tiago_dual/base_footprint/base_link>
                rel physics:body1 = </tiago_dual/caster_back_left_1_link>
                bool physics:collisionEnabled = 0
                point3f physics:localPos0 = (-0.1735, 0.102, -0.0335)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                vector3f urdf:joint:axis = (0, 0, 1)
                prepend rel urdf:joint:child = </tiago_dual/caster_back_left_1_link>
                float3 urdf:joint:origin:rpy = (0, -0, 0)
                point3f urdf:joint:origin:xyz = (-0.1735, 0.102, -0.0335)
                prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link>
                uniform token urdf:joint:type = "continuous"
            }

            def Xform "torso_fixed_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (0.11975406, 0.24629474, 0.30280018)
                float mujoco:body:inertial:mass = 16.4311
                point3f mujoco:body:inertial:pos = (-0.017453901, 1.347187e-9, 0.23028)
                quatf mujoco:body:inertial:quat = (0.99890774, -4.5431294e-9, -0.046725716, 2.8892906e-8)
                point3f mujoco:body:pos = (-0.062, 0, 0.193)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.017453901, 1.347187e-9, 0.23028)
                float3 physics:diagonalInertia = (0.11975406, 0.24629474, 0.30280018)
                float physics:mass = 16.4311
                quatf physics:principalAxes = (0.99890774, -4.5431294e-9, -0.046725716, 2.8892906e-8)
                float urdf:link:inertial:inertia:ixx = 0.11975406
                float urdf:link:inertial:inertia:iyy = 0.24629474
                float urdf:link:inertial:inertia:izz = 0.30280018
                float urdf:link:inertial:mass = 16.4311
                float3 urdf:link:inertial:origin:rpy = (-1.18280665e-8, -0.093485475, 5.8402275e-8)
                point3f urdf:link:inertial:origin:xyz = (-0.017453901, 1.347187e-9, 0.23028)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.062, 0, 0.193, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Mesh "torso_fixed_link_geom_visual_0_torso_fix" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                    prepend references = @./../assets/meshes/usd/torso_fix.usda@</torso_fix>
                )
                {
                    rel material:binding = </tiago_dual/base_footprint/base_link/torso_fixed_link/torso_fixed_link_geom_visual_0_torso_fix/Materials/M_LightGrey>
                    rel mujoco:geom:material = </mujoco/asset/materials/M_LightGrey>
                    rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_fix>
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1, 1, 1)
                    uniform token mujoco:geom:type = "mesh"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/torso_fix.obj@
                    float3 urdf:geometry:mesh:scale = (1, 1, 1)
                    rel urdf:visual:material = </urdf/robot/materials/M_LightGrey>
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Scope "Materials"
                    {
                        def Material "M_LightGrey" (
                            prepend references = @./../assets/materials/usd/M_LightGrey.usda@</M_LightGrey>
                        )
                        {
                        }
                    }
                }

                def Cube "torso_fixed_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0.085, 0, 0.02)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.2, 0.125, 0.02)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0.085, 0, 0.02)
                    float3 urdf:geometry:box:size = (0.4, 0.25, 0.04)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.2, 0, 0, 0), (0, 0.125, 0, 0), (0, 0, 0.02, 0), (0.085, 0, 0.02, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "torso_fixed_link_geom_collision_1" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0, 0, 0.05)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.125, 0.125, 0.05)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0.05)
                    float3 urdf:geometry:box:size = (0.25, 0.25, 0.1)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.125, 0, 0, 0), (0, 0.125, 0, 0), (0, 0, 0.05, 0), (0, 0, 0.05, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def PhysicsPrismaticJoint "torso_lift_joint" (
                    prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
                )
                {
                    vector3f mujoco:joint:axis = (0, 0, 1)
                    point3f mujoco:joint:pos = (0, 0, 0)
                    float2 mujoco:joint:range = (0, 0.8)
                    uniform token mujoco:joint:type = "slide"
                    uniform token physics:axis = "Z"
                    rel physics:body0 = </tiago_dual/base_footprint/base_link/torso_fixed_link>
                    rel physics:body1 = </tiago_dual/torso_lift_link>
                    bool physics:collisionEnabled = 0
                    point3f physics:localPos0 = (0, 0, 0.597)
                    point3f physics:localPos1 = (0, 0, 0)
                    quatf physics:localRot0 = (1, 0, 0, 0)
                    quatf physics:localRot1 = (1, 0, 0, 0)
                    float physics:lowerLimit = 0
                    float physics:upperLimit = 0.8
                    vector3f urdf:joint:axis = (0, 0, 1)
                    prepend rel urdf:joint:child = </tiago_dual/torso_lift_link>
                    float urdf:joint:limit:effort = 1000
                    float urdf:joint:limit:lower = 0
                    float urdf:joint:limit:upper = 0.8
                    float urdf:joint:limit:velocity = 1000
                    float3 urdf:joint:origin:rpy = (0, -0, 0)
                    point3f urdf:joint:origin:xyz = (0, 0, 0.597)
                    prepend rel urdf:joint:parent = </tiago_dual/base_footprint/base_link/torso_fixed_link>
                    uniform token urdf:joint:type = "prismatic"
                }
            }

            def Xform "torso_fixed_column_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (0.3759809, 5.111966, 5.1245065)
                float mujoco:body:inertial:mass = 48.895
                point3f mujoco:body:inertial:pos = (-0.062, 0, 0.47)
                quatf mujoco:body:inertial:quat = (0.70710677, 0, 0.70710677, 0)
                point3f mujoco:body:pos = (-0.062, 0, 0.195)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.062, 0, 0.47)
                float3 physics:diagonalInertia = (0.3759809, 5.111966, 5.1245065)
                float physics:mass = 48.895
                quatf physics:principalAxes = (0.70710677, 0, 0.70710677, 0)
                float urdf:link:inertial:inertia:ixx = 0.3759809
                float urdf:link:inertial:inertia:iyy = 5.111966
                float urdf:link:inertial:inertia:izz = 5.1245065
                float urdf:link:inertial:mass = 48.895
                float3 urdf:link:inertial:origin:rpy = (-0, 1.5707963, 0)
                point3f urdf:link:inertial:origin:xyz = (-0.062, 0, 0.47)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.062, 0, 0.195, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "torso_fixed_column_link_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0, 0, 0.275)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.09, 0.1, 0.275)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:geometry:box:size = (0.18, 0.2, 0.55)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0.275)
                    matrix4d xformOp:transform = ( (0.09, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.275, 0), (0, 0, 0.275, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "torso_fixed_column_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0, 0, 0.275)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.115, 0.115, 0.275)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0.275)
                    float3 urdf:geometry:box:size = (0.23, 0.23, 0.55)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.115, 0, 0, 0), (0, 0.115, 0, 0), (0, 0, 0.275, 0), (0, 0, 0.275, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "base_cover_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.01898417, 0.021554355, 0.037998576)
            float mujoco:body:inertial:mass = 0.5330962
            point3f mujoco:body:inertial:pos = (-0.018422345, -1.141809e-8, 0.17250001)
            quatf mujoco:body:inertial:quat = (0.7070515, 0.008976935, 0.00897811, 0.70704806)
            point3f mujoco:body:pos = (0, 0, 0.13)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-0.018422345, -1.141809e-8, 0.17250001)
            float3 physics:diagonalInertia = (0.01898417, 0.021554355, 0.037998576)
            float physics:mass = 0.5330962
            quatf physics:principalAxes = (0.7070515, 0.008976935, 0.00897811, 0.70704806)
            float urdf:link:inertial:inertia:ixx = 0.01898417
            float urdf:link:inertial:inertia:iyy = 0.021554355
            float urdf:link:inertial:inertia:izz = 0.037998576
            float urdf:link:inertial:mass = 0.5330962
            float3 urdf:link:inertial:origin:rpy = (0.025392951, 0.0000017227873, 1.5707915)
            point3f urdf:link:inertial:origin:xyz = (-0.018422345, -1.141809e-8, 0.17250001)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.13, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "base_cover_link_geom_visual_0_base_ring" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./../assets/meshes/usd/base_ring.usda@</base_ring>
            )
            {
                rel material:binding = </tiago_dual/base_footprint/base_cover_link/base_cover_link_geom_visual_0_base_ring/Materials/M_Orange>
                rel mujoco:geom:material = </mujoco/asset/materials/M_Orange>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/base_ring>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/base_ring.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/M_Orange>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "M_Orange" (
                        prepend references = @./../assets/materials/usd/M_Orange.usda@</M_Orange>
                    )
                    {
                    }
                }
            }
        }

        def Xform "rgbd_laser_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
        )
        {
            point3f mujoco:body:pos = (-0.9, 0, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.9, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "suspension_right_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.0985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "wheel_right_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/suspension_right_link>
            rel physics:body1 = </tiago_dual/wheel_right_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, -0.2022, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/wheel_right_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (0, -0.2022, 0)
            prepend rel urdf:joint:parent = </tiago_dual/suspension_right_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "wheel_right_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.018386452, 0.018392162, 0.020752799)
        float mujoco:body:inertial:mass = 4.9378133
        point3f mujoco:body:inertial:pos = (-0.0000024078645, -0.2023207, 0.09849669)
        quatf mujoco:body:inertial:quat = (-0.7033626, 0.00011322841, 0.00013592918, 0.7108313)
        point3f mujoco:body:pos = (0, -0.2022, 0)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (-0.0000024078645, -0.2023207, 0.09849669)
        float3 physics:diagonalInertia = (0.018386452, 0.018392162, 0.020752799)
        float physics:mass = 4.9378133
        quatf physics:principalAxes = (-0.7033626, 0.00011322841, 0.00013592918, 0.7108313)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.018386452
        float urdf:link:inertial:inertia:iyy = 0.018392162
        float urdf:link:inertial:inertia:izz = 0.020752799
        float urdf:link:inertial:mass = 4.9378133
        float3 urdf:link:inertial:origin:rpy = (0.000033964174, -0.00035218758, -1.5813587)
        point3f urdf:link:inertial:origin:xyz = (-0.0000024078645, -0.2023207, 0.09849669)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (0, -0.2021999955177307, 0.0985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "wheel_right_link_geom_visual_0_wheel" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/wheel.usda@</wheel>
        )
        {
            rel material:binding = </tiago_dual/wheel_right_link/wheel_right_link_geom_visual_0_wheel/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/wheel>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/wheel.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "wheel_right_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.0985, -0.0985, -0.0985), (0.0985, 0.0985, 0.0985)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.0985, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.0985
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.0985
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "suspension_left_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.0985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def PhysicsRevoluteJoint "wheel_left_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/suspension_left_link>
            rel physics:body1 = </tiago_dual/wheel_left_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0.2022, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/wheel_left_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (0, 0.2022, 0)
            prepend rel urdf:joint:parent = </tiago_dual/suspension_left_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "wheel_left_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.018386452, 0.018392162, 0.020752799)
        float mujoco:body:inertial:mass = 4.9378133
        point3f mujoco:body:inertial:pos = (-0.0000024078645, 0.2023207, 0.09850331)
        quatf mujoco:body:inertial:quat = (0.7108313, -0.00013592918, -0.00011322841, -0.7033626)
        point3f mujoco:body:pos = (0, 0.2022, 0)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (-0.0000024078645, 0.2023207, 0.09850331)
        float3 physics:diagonalInertia = (0.018386452, 0.018392162, 0.020752799)
        float physics:mass = 4.9378133
        quatf physics:principalAxes = (0.7108313, -0.00013592918, -0.00011322841, -0.7033626)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.018386452
        float urdf:link:inertial:inertia:iyy = 0.018392162
        float urdf:link:inertial:inertia:izz = 0.020752799
        float urdf:link:inertial:mass = 4.9378133
        float3 urdf:link:inertial:origin:rpy = (-0.000033964174, -0.00035218758, -1.560234)
        point3f urdf:link:inertial:origin:xyz = (-0.0000024078645, 0.2023207, 0.09850331)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (0, 0.2021999955177307, 0.0985, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "wheel_left_link_geom_visual_0_wheel" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/wheel.usda@</wheel>
        )
        {
            rel material:binding = </tiago_dual/wheel_left_link/wheel_left_link_geom_visual_0_wheel/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/wheel>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (-6.123234e-17, 1, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/wheel.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (-3.1415927, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0000000000000002, -1.2246467991473535e-16, 0), (0, 1.224646799147354e-16, -1.0000000000000007, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "wheel_left_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.0985, -0.0985, -0.0985), (0.0985, 0.0985, 0.0985)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.0985, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.0985
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.0985
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "caster_front_right_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float mujoco:body:inertial:mass = 0.012721667
        point3f mujoco:body:inertial:pos = (0.15843901, -0.10197509, 0.035019726)
        quatf mujoco:body:inertial:quat = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        point3f mujoco:body:pos = (0.1695, -0.102, -0.0335)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (0.15843901, -0.10197509, 0.035019726)
        float3 physics:diagonalInertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float physics:mass = 0.012721667
        quatf physics:principalAxes = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000017161858
        float urdf:link:inertial:inertia:iyy = 0.000016465297
        float urdf:link:inertial:inertia:izz = 0.000016936963
        float urdf:link:inertial:mass = 0.012721667
        float3 urdf:link:inertial:origin:rpy = (3.137523, 1.1986709, 3.1389515)
        point3f urdf:link:inertial:origin:xyz = (0.15843901, -0.10197509, 0.035019726)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.16949999332427979, -0.10199999809265137, 0.06499999916553498, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_front_right_1_link_geom_visual_0_caster_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_1.usda@</caster_1>
        )
        {
            rel material:binding = </tiago_dual/caster_front_right_1_link/caster_front_right_1_link_geom_visual_0_caster_1/Materials/M_Grey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Grey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Grey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Grey" (
                    prepend references = @./../assets/materials/usd/M_Grey.usda@</M_Grey>
                )
                {
                }
            }
        }

        def PhysicsRevoluteJoint "caster_front_right_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/caster_front_right_1_link>
            rel physics:body1 = </tiago_dual/caster_front_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/caster_front_right_2_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.016, 0, -0.04)
            prepend rel urdf:joint:parent = </tiago_dual/caster_front_right_1_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "caster_front_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float mujoco:body:inertial:mass = 0.096359245
        point3f mujoco:body:inertial:pos = (0.15349917, -0.10200052, 0.024999602)
        quatf mujoco:body:inertial:quat = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        point3f mujoco:body:pos = (-0.016, 0, -0.04)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (0.15349917, -0.10200052, 0.024999602)
        float3 physics:diagonalInertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float physics:mass = 0.096359245
        quatf physics:principalAxes = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000022672686
        float urdf:link:inertial:inertia:iyy = 0.000022677814
        float urdf:link:inertial:inertia:izz = 0.000027069651
        float urdf:link:inertial:mass = 0.096359245
        float3 urdf:link:inertial:origin:rpy = (-0.000014488305, -0.000032689168, -2.0116413)
        point3f urdf:link:inertial:origin:xyz = (0.15349917, -0.10200052, 0.024999602)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (0.15349999256432056, -0.10199999809265137, 0.02500000005960465, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_front_right_2_link_geom_visual_0_caster_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_2.usda@</caster_2>
        )
        {
            rel material:binding = </tiago_dual/caster_front_right_2_link/caster_front_right_2_link_geom_visual_0_caster_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "caster_front_right_2_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.025, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.025
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.025
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "caster_front_left_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float mujoco:body:inertial:mass = 0.012721667
        point3f mujoco:body:inertial:pos = (0.15843901, 0.102024905, 0.035019726)
        quatf mujoco:body:inertial:quat = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        point3f mujoco:body:pos = (0.1695, 0.102, -0.0335)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (0.15843901, 0.102024905, 0.035019726)
        float3 physics:diagonalInertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float physics:mass = 0.012721667
        quatf physics:principalAxes = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000017161858
        float urdf:link:inertial:inertia:iyy = 0.000016465297
        float urdf:link:inertial:inertia:izz = 0.000016936963
        float urdf:link:inertial:mass = 0.012721667
        float3 urdf:link:inertial:origin:rpy = (3.137523, 1.1986709, 3.1389515)
        point3f urdf:link:inertial:origin:xyz = (0.15843901, 0.102024905, 0.035019726)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.16949999332427979, 0.10199999809265137, 0.06499999916553498, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_front_left_1_link_geom_visual_0_caster_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_1.usda@</caster_1>
        )
        {
            rel material:binding = </tiago_dual/caster_front_left_1_link/caster_front_left_1_link_geom_visual_0_caster_1/Materials/M_Grey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Grey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Grey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Grey" (
                    prepend references = @./../assets/materials/usd/M_Grey.usda@</M_Grey>
                )
                {
                }
            }
        }

        def PhysicsRevoluteJoint "caster_front_left_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/caster_front_left_1_link>
            rel physics:body1 = </tiago_dual/caster_front_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/caster_front_left_2_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.016, 0, -0.04)
            prepend rel urdf:joint:parent = </tiago_dual/caster_front_left_1_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "caster_front_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float mujoco:body:inertial:mass = 0.096359245
        point3f mujoco:body:inertial:pos = (0.15349917, 0.10199948, 0.024999602)
        quatf mujoco:body:inertial:quat = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        point3f mujoco:body:pos = (-0.016, 0, -0.04)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (0.15349917, 0.10199948, 0.024999602)
        float3 physics:diagonalInertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float physics:mass = 0.096359245
        quatf physics:principalAxes = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000022672686
        float urdf:link:inertial:inertia:iyy = 0.000022677814
        float urdf:link:inertial:inertia:izz = 0.000027069651
        float urdf:link:inertial:mass = 0.096359245
        float3 urdf:link:inertial:origin:rpy = (-0.000014488305, -0.000032689168, -2.0116413)
        point3f urdf:link:inertial:origin:xyz = (0.15349917, 0.10199948, 0.024999602)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (0.15349999256432056, 0.10199999809265137, 0.02500000005960465, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_front_left_2_link_geom_visual_0_caster_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_2.usda@</caster_2>
        )
        {
            rel material:binding = </tiago_dual/caster_front_left_2_link/caster_front_left_2_link_geom_visual_0_caster_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "caster_front_left_2_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.025, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.025
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.025
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "caster_back_right_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float mujoco:body:inertial:mass = 0.012721667
        point3f mujoco:body:inertial:pos = (-0.18456098, -0.10197509, 0.035019726)
        quatf mujoco:body:inertial:quat = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        point3f mujoco:body:pos = (-0.1735, -0.102, -0.0335)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (-0.18456098, -0.10197509, 0.035019726)
        float3 physics:diagonalInertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float physics:mass = 0.012721667
        quatf physics:principalAxes = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000017161858
        float urdf:link:inertial:inertia:iyy = 0.000016465297
        float urdf:link:inertial:inertia:izz = 0.000016936963
        float urdf:link:inertial:mass = 0.012721667
        float3 urdf:link:inertial:origin:rpy = (3.137523, 1.1986709, 3.1389515)
        point3f urdf:link:inertial:origin:xyz = (-0.18456098, -0.10197509, 0.035019726)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.17350000143051147, -0.10199999809265137, 0.06499999916553498, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_back_right_1_link_geom_visual_0_caster_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_1.usda@</caster_1>
        )
        {
            rel material:binding = </tiago_dual/caster_back_right_1_link/caster_back_right_1_link_geom_visual_0_caster_1/Materials/M_Grey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Grey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Grey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Grey" (
                    prepend references = @./../assets/materials/usd/M_Grey.usda@</M_Grey>
                )
                {
                }
            }
        }

        def PhysicsRevoluteJoint "caster_back_right_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/caster_back_right_1_link>
            rel physics:body1 = </tiago_dual/caster_back_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/caster_back_right_2_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.016, 0, -0.04)
            prepend rel urdf:joint:parent = </tiago_dual/caster_back_right_1_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "caster_back_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float mujoco:body:inertial:mass = 0.096359245
        point3f mujoco:body:inertial:pos = (-0.18950082, -0.10200052, 0.024999602)
        quatf mujoco:body:inertial:quat = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        point3f mujoco:body:pos = (-0.016, 0, -0.04)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (-0.18950082, -0.10200052, 0.024999602)
        float3 physics:diagonalInertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float physics:mass = 0.096359245
        quatf physics:principalAxes = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000022672686
        float urdf:link:inertial:inertia:iyy = 0.000022677814
        float urdf:link:inertial:inertia:izz = 0.000027069651
        float urdf:link:inertial:mass = 0.096359245
        float3 urdf:link:inertial:origin:rpy = (-0.000014488305, -0.000032689168, -2.0116413)
        point3f urdf:link:inertial:origin:xyz = (-0.18950082, -0.10200052, 0.024999602)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (-0.1895000021904707, -0.10199999809265137, 0.02500000005960465, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_back_right_2_link_geom_visual_0_caster_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_2.usda@</caster_2>
        )
        {
            rel material:binding = </tiago_dual/caster_back_right_2_link/caster_back_right_2_link_geom_visual_0_caster_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "caster_back_right_2_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.025, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.025
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.025
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "caster_back_left_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float mujoco:body:inertial:mass = 0.012721667
        point3f mujoco:body:inertial:pos = (-0.18456098, 0.102024905, 0.035019726)
        quatf mujoco:body:inertial:quat = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        point3f mujoco:body:pos = (-0.1735, 0.102, -0.0335)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (-0.18456098, 0.102024905, 0.035019726)
        float3 physics:diagonalInertia = (0.0000017161858, 0.000016465297, 0.000016936963)
        float physics:mass = 0.012721667
        quatf physics:principalAxes = (0.5640944, -0.000057430843, 0.82570976, 0.0009352569)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0000017161858
        float urdf:link:inertial:inertia:iyy = 0.000016465297
        float urdf:link:inertial:inertia:izz = 0.000016936963
        float urdf:link:inertial:mass = 0.012721667
        float3 urdf:link:inertial:origin:rpy = (3.137523, 1.1986709, 3.1389515)
        point3f urdf:link:inertial:origin:xyz = (-0.18456098, 0.102024905, 0.035019726)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.17350000143051147, 0.10199999809265137, 0.06499999916553498, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_back_left_1_link_geom_visual_0_caster_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_1.usda@</caster_1>
        )
        {
            rel material:binding = </tiago_dual/caster_back_left_1_link/caster_back_left_1_link_geom_visual_0_caster_1/Materials/M_Grey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Grey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Grey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Grey" (
                    prepend references = @./../assets/materials/usd/M_Grey.usda@</M_Grey>
                )
                {
                }
            }
        }

        def PhysicsRevoluteJoint "caster_back_left_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/caster_back_left_1_link>
            rel physics:body1 = </tiago_dual/caster_back_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.016, 0, -0.04)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/caster_back_left_2_link>
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.016, 0, -0.04)
            prepend rel urdf:joint:parent = </tiago_dual/caster_back_left_1_link>
            uniform token urdf:joint:type = "continuous"
        }
    }

    def Xform "caster_back_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float mujoco:body:inertial:mass = 0.096359245
        point3f mujoco:body:inertial:pos = (-0.18950082, 0.10199948, 0.024999602)
        quatf mujoco:body:inertial:quat = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        point3f mujoco:body:pos = (-0.016, 0, -0.04)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (-0.18950082, 0.10199948, 0.024999602)
        float3 physics:diagonalInertia = (0.000022672686, 0.000022677814, 0.000027069651)
        float physics:mass = 0.096359245
        quatf physics:principalAxes = (-0.53539526, 0.000017683147, 0.0000026323896, 0.84460163)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000022672686
        float urdf:link:inertial:inertia:iyy = 0.000022677814
        float urdf:link:inertial:inertia:izz = 0.000027069651
        float urdf:link:inertial:mass = 0.096359245
        float3 urdf:link:inertial:origin:rpy = (-0.000014488305, -0.000032689168, -2.0116413)
        point3f urdf:link:inertial:origin:xyz = (-0.18950082, 0.10199948, 0.024999602)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (-0.1895000021904707, 0.10199999809265137, 0.02500000005960465, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "caster_back_left_2_link_geom_visual_0_caster_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/caster_2.usda@</caster_2>
        )
        {
            rel material:binding = </tiago_dual/caster_back_left_2_link/caster_back_left_2_link_geom_visual_0_caster_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/caster_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/caster_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Sphere "caster_back_left_2_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometrySphereAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-0.025, -0.025, -0.025), (0.025, 0.025, 0.025)]
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (0.025, 0, 0)
            uniform token mujoco:geom:type = "sphere"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            double radius = 0.025
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            float urdf:geometry:sphere:radius = 0.025
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "torso_lift_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (1.1445907, 5.456186, 5.4765515)
        float mujoco:body:inertial:mass = 80.0018
        point3f mujoco:body:inertial:pos = (-0.063868895, 0.000038386723, 0.6812767)
        quatf mujoco:body:inertial:quat = (-0.69531244, 0.12151611, 0.69766486, 0.12263037)
        point3f mujoco:body:pos = (0, 0, 0.597)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (-0.063868895, 0.000038386723, 0.6812767)
        float3 physics:diagonalInertia = (1.1445907, 5.456186, 5.4765515)
        float physics:mass = 80.0018
        quatf physics:principalAxes = (-0.69531244, 0.12151611, 0.69766486, 0.12263037)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 1.1445907
        float urdf:link:inertial:inertia:iyy = 5.456186
        float urdf:link:inertial:inertia:izz = 5.4765515
        float urdf:link:inertial:mass = 80.0018
        float3 urdf:link:inertial:origin:rpy = (2.5257246, -1.5671152, -2.8727388)
        point3f urdf:link:inertial:origin:xyz = (-0.063868895, 0.000038386723, 0.6812767)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.062, 0, 0.8885000028610229, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "torso_lift_link_geom_visual_0_torso_lift_dual_arm" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/torso_lift_dual_arm.usda@</torso_lift_dual_arm>
        )
        {
            rel material:binding = </tiago_dual/torso_lift_link/torso_lift_link_geom_visual_0_torso_lift_dual_arm/Materials/M_White>
            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_lift_dual_arm>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/torso_lift_dual_arm.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_White>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_White" (
                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                )
                {
                }
            }
        }

        def Mesh "torso_lift_link_geom_collision_0_torso_lift_collision_shoulder" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/torso_lift_collision_shoulder.usda@</torso_lift_collision_shoulder>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_lift_collision_shoulder>
            point3f mujoco:geom:pos = (-0.131, 0.17, -0.02556)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (-0.131, 0.17, -0.02556)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/torso_lift_collision_shoulder.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.131, 0.17, -0.02556, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "torso_lift_link_geom_collision_1_torso_lift_collision_shoulder" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/torso_lift_collision_shoulder.usda@</torso_lift_collision_shoulder>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_lift_collision_shoulder>
            point3f mujoco:geom:pos = (-0.131, -0.19, -0.02556)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (-0.131, -0.19, -0.02556)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/torso_lift_collision_shoulder.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.131, -0.19, -0.02556, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "torso_lift_link_geom_collision_2_torso_lift_collision_core" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/torso_lift_collision_core.usda@</torso_lift_collision_core>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_lift_collision_core>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/torso_lift_collision_core.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "torso_lift_link_geom_collision_3_torso_lift_collision_neck" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/torso_lift_collision_neck.usda@</torso_lift_collision_neck>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/torso_lift_collision_neck>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/torso_lift_collision_neck.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "head_1_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.3089969, 1.3089969)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/torso_lift_link>
            rel physics:body1 = </tiago_dual/head_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.182, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -75
            float physics:upperLimit = 75
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/head_1_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.3089969
            float urdf:joint:limit:upper = 1.3089969
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, -0, 0)
            point3f urdf:joint:origin:xyz = (0.182, 0, 0)
            prepend rel urdf:joint:parent = </tiago_dual/torso_lift_link>
            uniform token urdf:joint:type = "revolute"
        }

        def PhysicsRevoluteJoint "arm_left_1_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.1780972, 1.5707964)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/torso_lift_link>
            rel physics:body1 = </tiago_dual/arm_left_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.02556, 0.19, -0.171)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (4.3297803e-17, 0.70710677, 0.70710677, 4.3297803e-17)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.5
            float physics:upperLimit = 90
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_1_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.1780972
            float urdf:joint:limit:upper = 1.5707964
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (3.1415927, -0, 1.5707964)
            point3f urdf:joint:origin:xyz = (0.02556, 0.19, -0.171)
            prepend rel urdf:joint:parent = </tiago_dual/torso_lift_link>
            uniform token urdf:joint:type = "revolute"
        }

        def PhysicsRevoluteJoint "arm_right_1_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.1780972, 1.5707964)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/torso_lift_link>
            rel physics:body1 = </tiago_dual/arm_right_1_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.02556, -0.19, -0.171)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.5
            float physics:upperLimit = 90
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_1_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.1780972
            float urdf:joint:limit:upper = 1.5707964
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, 0, -1.5707964)
            point3f urdf:joint:origin:xyz = (0.02556, -0.19, -0.171)
            prepend rel urdf:joint:parent = </tiago_dual/torso_lift_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "head_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0075652096, 0.032833803, 0.036554944)
        float mujoco:body:inertial:mass = 3.181232
        point3f mujoco:body:inertial:pos = (0.12840705, -3.361464e-8, 0.97470367)
        quatf mujoco:body:inertial:quat = (0.4704481, 0.47044718, 0.52790105, -0.52790004)
        point3f mujoco:body:pos = (0.182, 0, 0)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        point3f physics:centerOfMass = (0.12840705, -3.361464e-8, 0.97470367)
        float3 physics:diagonalInertia = (0.0075652096, 0.032833803, 0.036554944)
        float physics:mass = 3.181232
        quatf physics:principalAxes = (0.4704481, 0.47044718, 0.52790105, -0.52790004)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0075652096
        float urdf:link:inertial:inertia:iyy = 0.032833803
        float urdf:link:inertial:inertia:izz = 0.036554944
        float urdf:link:inertial:mass = 3.181232
        float3 urdf:link:inertial:origin:rpy = (-1.570798, 1.4558272, -3.1415925)
        point3f urdf:link:inertial:origin:xyz = (0.12840705, -3.361464e-8, 0.97470367)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.11999999630451202, 0, 0.8885000028610229, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "head_1_link_geom_visual_0_head_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/head_1.usda@</head_1>
        )
        {
            rel material:binding = </tiago_dual/head_1_link/head_1_link_geom_visual_0_head_1/Materials/M_White>
            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/head_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/head_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_White>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_White" (
                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                )
                {
                }
            }
        }

        def Mesh "head_1_link_geom_collision_0_head_1_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/head_1_collision.usda@</head_1_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/head_1_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/head_1_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "head_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.0471976, 0.7853982)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/head_1_link>
            rel physics:body1 = </tiago_dual/head_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.005, 0, 0.098)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60
            float physics:upperLimit = 45
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/head_2_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.0471976
            float urdf:joint:limit:upper = 0.7853982
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, -0, 0)
            point3f urdf:joint:origin:xyz = (0.005, 0, 0.098)
            prepend rel urdf:joint:parent = </tiago_dual/head_1_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "head_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.06285745, 0.069056824, 0.09810262)
        float mujoco:body:inertial:mass = 10.356944
        point3f mujoco:body:inertial:pos = (0.14982212, 0.000026318465, 1.0350417)
        quatf mujoco:body:inertial:quat = (-0.32489356, -0.32307124, 0.6289271, 0.62810814)
        point3f mujoco:body:pos = (0.005, 0, 0.098)
        quatf mujoco:body:quat = (0.70710677, 0.70710677, 0, 0)
        point3f physics:centerOfMass = (0.14982212, 0.000026318465, 1.0350417)
        float3 physics:diagonalInertia = (0.06285745, 0.069056824, 0.09810262)
        float physics:mass = 10.356944
        quatf physics:principalAxes = (-0.32489356, -0.32307124, 0.6289271, 0.62810814)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.06285745
        float urdf:link:inertial:inertia:iyy = 0.069056824
        float urdf:link:inertial:inertia:izz = 0.09810262
        float urdf:link:inertial:mass = 10.356944
        float3 urdf:link:inertial:origin:rpy = (1.570645, -0.0028213898, -2.1896977)
        point3f urdf:link:inertial:origin:xyz = (0.14982212, 0.000026318465, 1.0350417)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, 1, 0), (0, -1, 2.220446049250313e-16, 0), (0.12499999619275332, 0, 0.9865000002980232, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "head_2_link_geom_visual_0_head_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/head_2.usda@</head_2>
        )
        {
            rel material:binding = </tiago_dual/head_2_link/head_2_link_geom_visual_0_head_2/Materials/M_White>
            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/head_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/head_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_White>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_White" (
                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                )
                {
                }
            }
        }

        def Mesh "head_2_link_geom_collision_0_head_2_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/head_2_collision.usda@</head_2_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/head_2_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/head_2_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "xtion_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
        )
        {
            point3f mujoco:body:pos = (0.0908, 0.08, 0)
            quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.220446049250313e-16, -1, 0), (0, 1, 2.220446049250313e-16, 0), (0.0908, 0.08, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "xtion_optical_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (0.5, -0.5, 0.5, -0.5)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (2.220446049250313e-16, 0, -1, 0), (1, 2.220446049250313e-16, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "xtion_orbbec_aux_joint_frame" (
                prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
            )
            {
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Xform "xtion_rgb_frame" (
                    prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                )
                {
                    point3f mujoco:body:pos = (0, 0.022, 0)
                    quatf mujoco:body:quat = (1, 0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.022, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Xform "xtion_depth_frame" (
                        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                    )
                    {
                        point3f mujoco:body:pos = (0, 0.025, 0)
                        quatf mujoco:body:quat = (1, 0, 0, 0)
                        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.025, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Xform "xtion_depth_optical_frame" (
                            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                        )
                        {
                            point3f mujoco:body:pos = (0, 0, 0)
                            quatf mujoco:body:quat = (0.5, -0.5, 0.5, -0.5)
                            matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (2.220446049250313e-16, 0, -1, 0), (1, 2.220446049250313e-16, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }

                    def Xform "xtion_rgb_optical_frame" (
                        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                    )
                    {
                        point3f mujoco:body:pos = (0, 0, 0)
                        quatf mujoco:body:quat = (0.5, -0.5, 0.5, -0.5)
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (2.220446049250313e-16, 0, -1, 0), (1, 2.220446049250313e-16, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }
                }
            }
        }
    }

    def Xform "arm_left_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.002655229, 0.024643911, 0.02477995)
        float mujoco:body:inertial:mass = 2.3265564
        point3f mujoco:body:inertial:pos = (-0.062415265, 0.26109612, 0.70683265)
        quatf mujoco:body:inertial:quat = (0.93972987, -0.269646, -0.050450835, -0.20409207)
        point3f mujoco:body:pos = (0.02556, 0.19, -0.171)
        quatf mujoco:body:quat = (4.3297803e-17, 0.70710677, 0.70710677, 4.3297803e-17)
        point3f physics:centerOfMass = (-0.062415265, 0.26109612, 0.70683265)
        float3 physics:diagonalInertia = (0.002655229, 0.024643911, 0.02477995)
        float physics:mass = 2.3265564
        quatf physics:principalAxes = (0.93972987, -0.269646, -0.050450835, -0.20409207)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.002655229
        float urdf:link:inertial:inertia:iyy = 0.024643911
        float urdf:link:inertial:inertia:izz = 0.02477995
        float urdf:link:inertial:mass = 2.3265564
        float3 urdf:link:inertial:origin:rpy = (-0.51983076, -0.20634675, -0.37266532)
        point3f urdf:link:inertial:origin:xyz = (-0.062415265, 0.26109612, 0.70683265)
        matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (1, -2.220446049250313e-16, 1.2246467991473532e-16, 0), (1.2246467991473532e-16, -2.465190328815662e-32, -1, 0), (-0.03643999908864498, 0.1899999976158142, 0.7174999990463257, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_1_link_geom_visual_0_arm_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_1.usda@</arm_1>
        )
        {
            rel material:binding = </tiago_dual/arm_left_1_link/arm_left_1_link_geom_visual_0_arm_1/Materials/M_White>
            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_1>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 1, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_1.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_White>
            float3 urdf:visual:origin:rpy = (3.1415927, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0000000000000004, 1.2246467991473537e-16, 0), (0, -1.2246467991473537e-16, -1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_White" (
                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                )
                {
                }
            }
        }

        def Mesh "arm_left_1_link_geom_collision_0_arm_1_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_1_collision.usda@</arm_1_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_1_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 1, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (3.1415927, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_1_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -1.0000000000000004, 1.2246467991473537e-16, 0), (0, -1.2246467991473537e-16, -1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (6.938894e-18, -1.540744e-33, -0)
            float2 mujoco:joint:range = (-1.1780972, 1.5707964)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_1_link>
            rel physics:body1 = </tiago_dual/arm_left_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.125, -0.0195, 0.031)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0.70710677, -0, -0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.5
            float physics:upperLimit = 90
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_2_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.1780972
            float urdf:joint:limit:upper = 1.5707964
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (0.125, -0.0195, 0.031)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_1_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0018821029, 0.0033415968, 0.0034246366)
        float mujoco:body:inertial:mass = 1.2833431
        point3f mujoco:body:inertial:pos = (-0.06404111, 0.3396865, 0.6863976)
        quatf mujoco:body:inertial:quat = (0.004454122, 0.9991291, 0.0009602802, -0.041475654)
        point3f mujoco:body:pos = (0.125, -0.0195, 0.031)
        quatf mujoco:body:quat = (0.70710677, 0.70710677, -3.1892504e-17, 3.1892504e-17)
        point3f physics:centerOfMass = (-0.06404111, 0.3396865, 0.6863976)
        float3 physics:diagonalInertia = (0.0018821029, 0.0033415968, 0.0034246366)
        float physics:mass = 1.2833431
        quatf physics:principalAxes = (0.004454122, 0.9991291, 0.0009602802, -0.041475654)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0018821029
        float urdf:link:inertial:inertia:iyy = 0.0033415968
        float urdf:link:inertial:inertia:izz = 0.0034246366
        float urdf:link:inertial:mass = 1.2833431
        float3 urdf:link:inertial:origin:rpy = (3.1327412, 0.08298283, 0.0015547633)
        point3f urdf:link:inertial:origin:xyz = (-0.06404111, 0.3396865, 0.6863976)
        matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (3.4450928483976665e-16, -7.395570986446986e-32, -1, 0), (-1, 2.220446049250313e-16, -3.4450928483976665e-16, 0), (-0.055939999490976305, 0.3149999976158142, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_2_link_geom_visual_0_arm_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_2.usda@</arm_2>
        )
        {
            rel material:binding = </tiago_dual/arm_left_2_link/arm_left_2_link_geom_visual_0_arm_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_2__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 0, 0, 1)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_2.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 3.1415927)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (1.2246467991473537e-16, 1.0000000000000004, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_left_2_link_geom_collision_0_arm_2_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_2_collision.usda@</arm_2_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_2_collision__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 0, 0, 1)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415927)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_2_collision.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (1.2246467991473537e-16, 1.0000000000000004, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_3_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (3.081488e-33, 0, 0)
            float2 mujoco:joint:range = (-0.7853982, 3.9269907)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_2_link>
            rel physics:body1 = </tiago_dual/arm_left_3_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.0895, 3.081488e-33, -0.0015)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -45
            float physics:upperLimit = 225
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_3_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.7853982
            float urdf:joint:limit:upper = 3.9269907
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, -0, 1.5707964)
            point3f urdf:joint:origin:xyz = (0.0895, 3.081488e-33, -0.0015)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_2_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_3_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.005868875, 0.08974361, 0.090422876)
        float mujoco:body:inertial:mass = 4.2203827
        point3f mujoco:body:inertial:pos = (-0.060569495, 0.28310236, 0.6934171)
        quatf mujoco:body:inertial:quat = (-0.35075223, -0.58708674, -0.41339532, 0.60117084)
        point3f mujoco:body:pos = (0.0895, 0, -0.0015)
        quatf mujoco:body:quat = (0.5, 0.5, 0.5, 0.5)
        point3f physics:centerOfMass = (-0.060569495, 0.28310236, 0.6934171)
        float3 physics:diagonalInertia = (0.005868875, 0.08974361, 0.090422876)
        float physics:mass = 4.2203827
        quatf physics:principalAxes = (-0.35075223, -0.58708674, -0.41339532, 0.60117084)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.005868875
        float urdf:link:inertial:inertia:iyy = 0.08974361
        float urdf:link:inertial:inertia:izz = 0.090422876
        float urdf:link:inertial:mass = 4.2203827
        float3 urdf:link:inertial:origin:rpy = (-1.9211397, 1.479963, 2.3634467)
        point3f urdf:link:inertial:origin:xyz = (-0.060569495, 0.28310236, 0.6934171)
        matrix4d xformOp:transform = ( (3.445092848397666e-16, -2.220446049250314e-16, -1, 0), (-1, 4.440892098500626e-16, -3.4450928483976665e-16, 0), (4.440892098500627e-16, 1, -2.2204460492503123e-16, 0), (-0.05443999947793777, 0.40450000017881393, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_3_link_geom_visual_0_arm_3" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_3.usda@</arm_3>
        )
        {
            rel material:binding = </tiago_dual/arm_left_3_link/arm_left_3_link_geom_visual_0_arm_3/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_3__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 0, 0, 1)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_3.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 3.1415927)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (1.2246467991473537e-16, 1.0000000000000004, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_left_3_link_geom_collision_0_arm_3_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_3_collision.usda@</arm_3_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_3_collision__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 0, 0, 1)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415927)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_3_collision.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (1.2246467991473537e-16, 1.0000000000000004, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_4_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (5.551115e-17, 1.8488927e-32, 1.8488927e-32)
            float2 mujoco:joint:range = (-0.3926991, 2.3561945)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_3_link>
            rel physics:body1 = </tiago_dual/arm_left_4_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.02, -0.027, 0.222)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, -0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -22.5
            float physics:upperLimit = 135
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_4_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.3926991
            float urdf:joint:limit:upper = 2.3561945
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (-0.02, -0.027, 0.222)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_3_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_4_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.005166411, 0.043154817, 0.04374337)
        float mujoco:body:inertial:mass = 3.670089
        point3f mujoco:body:inertial:pos = (-0.007270804, 0.7061768, 0.69345737)
        quatf mujoco:body:inertial:quat = (0.9669659, -0.22171928, -0.08499586, -0.092699245)
        point3f mujoco:body:pos = (-0.02, -0.027, 0.222)
        quatf mujoco:body:quat = (0.5, 0.5, -0.5, 0.5)
        point3f physics:centerOfMass = (-0.007270804, 0.7061768, 0.69345737)
        float3 physics:diagonalInertia = (0.005166411, 0.043154817, 0.04374337)
        float physics:mass = 3.670089
        quatf physics:principalAxes = (0.9669659, -0.22171928, -0.08499586, -0.092699245)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.005166411
        float urdf:link:inertial:inertia:iyy = 0.043154817
        float urdf:link:inertial:inertia:izz = 0.04374337
        float urdf:link:inertial:mass = 3.670089
        float3 urdf:link:inertial:origin:rpy = (-0.43569198, -0.20695683, -0.14518021)
        point3f urdf:link:inertial:origin:xyz = (-0.007270804, 0.7061768, 0.69345737)
        matrix4d xformOp:transform = ( (4.440892098500628e-16, 1, -4.440892098500625e-16, 0), (-1.224646799147352e-16, 4.440892098500626e-16, 1, 0), (1, -4.440892098500627e-16, 1.2246467991473535e-16, 0), (-0.027439998777583102, 0.6265000030398369, 0.7064999991059303, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_4_link_geom_visual_0_arm_4" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_4.usda@</arm_4>
        )
        {
            rel material:binding = </tiago_dual/arm_left_4_link/arm_left_4_link_geom_visual_0_arm_4/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_4__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_4.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_left_4_link_geom_collision_0_arm_4_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_4_collision.usda@</arm_4_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_4_collision__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_4_collision.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_5_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (1.110223e-16, 3.469447e-18, -3.6977855e-32)
            float2 mujoco:joint:range = (-2.0943952, 2.0943952)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_4_link>
            rel physics:body1 = </tiago_dual/arm_left_5_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.162, -0.02, -0.027)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -1.7431528e-32, -0.70710677, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120
            float physics:upperLimit = 120
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_5_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -2.0943952
            float urdf:joint:limit:upper = 2.0943952
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-0, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (0.162, -0.02, -0.027)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_4_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_5_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.006034792, 0.02849563, 0.029476222)
        float mujoco:body:inertial:mass = 3.0939374
        point3f mujoco:body:inertial:pos = (-0.049842488, 0.7072208, 0.686379)
        quatf mujoco:body:inertial:quat = (0.6893705, -0.001274745, 0.72439957, 0.0034514684)
        point3f mujoco:body:pos = (0.162, -0.02, -0.027)
        quatf mujoco:body:quat = (0.70710677, -3.679904e-18, -0.70710677, 5.5198563e-17)
        point3f physics:centerOfMass = (-0.049842488, 0.7072208, 0.686379)
        float3 physics:diagonalInertia = (0.006034792, 0.02849563, 0.029476222)
        float physics:mass = 3.0939374
        quatf physics:principalAxes = (0.6893705, -0.001274745, 0.72439957, 0.0034514684)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.006034792
        float urdf:link:inertial:inertia:iyy = 0.02849563
        float urdf:link:inertial:inertia:izz = 0.029476222
        float urdf:link:inertial:mass = 3.0939374
        float3 urdf:link:inertial:origin:rpy = (3.076189, 1.5211571, 3.082875)
        point3f urdf:link:inertial:origin:xyz = (-0.049842488, 0.7072208, 0.686379)
        matrix4d xformOp:transform = ( (1, -2.220446049250314e-16, 1.2246467991473525e-16, 0), (-1.224646799147352e-16, 4.440892098500626e-16, 1, 0), (-2.220446049250315e-16, -1, 4.4408920985006257e-16, 0), (-0.05443999947793761, 0.788500003516674, 0.686499999552965, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_5_link_geom_visual_0_arm_5_wrist_2017" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_5_wrist_2017.usda@</arm_5_wrist_2017>
        )
        {
            rel material:binding = </tiago_dual/arm_left_5_link/arm_left_5_link_geom_visual_0_arm_5_wrist_2017/Materials/M_LightGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_LightGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_5_wrist_2017__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_5-wrist-2017.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_LightGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_LightGrey" (
                    prepend references = @./../assets/materials/usd/M_LightGrey.usda@</M_LightGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_left_5_link_geom_collision_0_arm_5_collision_wrist_2017" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_5_collision_wrist_2017.usda@</arm_5_collision_wrist_2017>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_5_collision_wrist_2017__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_5_collision_wrist_2017.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_6_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.4137167, 1.4137167)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_5_link>
            rel physics:body1 = </tiago_dual/arm_left_6_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, -0.15)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -81
            float physics:upperLimit = 81
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_6_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.4137167
            float urdf:joint:limit:upper = 1.4137167
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-1.5707964, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (0, 0, -0.15)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_5_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_6_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0001605233, 0.00039506948, 0.00048799763)
        float mujoco:body:inertial:mass = 0.39394847
        point3f mujoco:body:inertial:pos = (-0.054436106, 0.9269352, 0.6865179)
        quatf mujoco:body:inertial:quat = (0.99999845, 0.000989691, 0.00003206327, 0.0014668669)
        point3f mujoco:body:pos = (0, 0, -0.15)
        quatf mujoco:body:quat = (-0.5, 0.5, 0.5, 0.5)
        point3f physics:centerOfMass = (-0.054436106, 0.9269352, 0.6865179)
        float3 physics:diagonalInertia = (0.0001605233, 0.00039506948, 0.00048799763)
        float physics:mass = 0.39394847
        quatf physics:principalAxes = (0.99999845, 0.000989691, 0.00003206327, 0.0014668669)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0001605233
        float urdf:link:inertial:inertia:iyy = 0.00039506948
        float urdf:link:inertial:inertia:izz = 0.00048799763
        float urdf:link:inertial:mass = 0.39394847
        float3 urdf:link:inertial:origin:rpy = (0.0019794742, 0.00006122295, 0.002933797)
        point3f urdf:link:inertial:origin:xyz = (-0.054436106, 0.9269352, 0.6865179)
        matrix4d xformOp:transform = ( (-1.9721522630525295e-31, -1, 4.440892098500626e-16, 0), (1, -1.9721522630525295e-31, -9.957992501029616e-17, 0), (9.957992501029611e-17, 4.4408920985006257e-16, 1, 0), (-0.054439999477937574, 0.9385000094771385, 0.6864999995529649, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_left_6_link_geom_visual_0_arm_6_wrist_2017" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_6_wrist_2017.usda@</arm_6_wrist_2017>
        )
        {
            rel material:binding = </tiago_dual/arm_left_6_link/arm_left_6_link_geom_visual_0_arm_6_wrist_2017/Materials/M_LightGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_LightGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_6_wrist_2017__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 1, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_6-wrist-2017.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_LightGrey>
            float3 urdf:visual:origin:rpy = (3.1415927, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, 1.0000000000000004, -1.2246467991473537e-16, 0), (0, 1.2246467991473537e-16, 1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_LightGrey" (
                    prepend references = @./../assets/materials/usd/M_LightGrey.usda@</M_LightGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_left_6_link_geom_collision_0_arm_6_collision_wrist_2017" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_6_collision_wrist_2017.usda@</arm_6_collision_wrist_2017>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_6_collision_wrist_2017__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (6.123234e-17, 1, 0, 0)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (3.1415927, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_6_collision_wrist_2017.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-1, 0, 0, 0), (0, 1.0000000000000004, -1.2246467991473537e-16, 0), (0, 1.2246467991473537e-16, 1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_left_7_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-2.0943952, 2.0943952)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_left_6_link>
            rel physics:body1 = </tiago_dual/arm_left_7_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120
            float physics:upperLimit = 120
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_left_7_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -2.0943952
            float urdf:joint:limit:upper = 2.0943952
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, -0, 1.5707964)
            point3f urdf:joint:origin:xyz = (0, 0, 0)
            prepend rel urdf:joint:parent = </tiago_dual/arm_left_6_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_left_7_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (0.5, 0.5, 0.5, 0.5)
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 2.220446049250311e-16, -9.957992501029626e-17, 0), (9.957992501029611e-17, 2.2204460492503126e-16, 1, 0), (2.2204460492503109e-16, -1, 2.220446049250313e-16, 0), (-0.054439999477937574, 0.9385000094771385, 0.6864999995529649, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "arm_left_tool_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (7.330383e-9, 7.330383e-9, 9.817477e-9)
            float mujoco:body:inertial:mass = 0.0007853982
            point3f mujoco:body:inertial:pos = (2.2204462e-19, 0, -0.047)
            quatf mujoco:body:inertial:quat = (0, 0.70710677, 0, 0.70710677)
            point3f mujoco:body:pos = (6.938894e-18, 0, -0.046)
            quatf mujoco:body:quat = (-0.5, 0.5, -0.5, -0.5)
            point3f physics:centerOfMass = (2.2204462e-19, 0, -0.047)
            float3 physics:diagonalInertia = (7.330383e-9, 7.330383e-9, 9.817477e-9)
            float physics:mass = 0.0007853982
            quatf physics:principalAxes = (0, 0.70710677, 0, 0.70710677)
            float urdf:link:inertial:inertia:ixx = 7.330383e-9
            float urdf:link:inertial:inertia:iyy = 7.330383e-9
            float urdf:link:inertial:inertia:izz = 9.817477e-9
            float urdf:link:inertial:mass = 0.0007853982
            float3 urdf:link:inertial:origin:rpy = (3.1415927, -1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (2.2204462e-19, 0, -0.047)
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (-1, -2.220446049250313e-16, -2.220446049250313e-16, 0), (-2.220446049250313e-16, 1, 0, 0), (0, 0, -0.046, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "arm_left_tool_link_geom_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.005, -0.005, -0.0025), (0.005, 0.005, 0.0025)]
                double height = 0.005
                point3f mujoco:geom:pos = (0.001, 0, 0)
                quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                vector3f mujoco:geom:size = (0.005, 0.0025, 0)
                uniform token mujoco:geom:type = "cylinder"
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.005
                float urdf:geometry:cylinder:length = 0.005
                float urdf:geometry:cylinder:radius = 0.005
                float3 urdf:visual:origin:rpy = (-0, 1.5707964, 0)
                point3f urdf:visual:origin:xyz = (0.001, 0, 0)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0.001, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "arm_left_tool_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.005, -0.005, -0.0025), (0.005, 0.005, 0.0025)]
                double height = 0.005
                point3f mujoco:geom:pos = (0.001, 0, 0)
                quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                vector3f mujoco:geom:size = (0.005, 0.0025, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.005
                float3 urdf:collision:origin:rpy = (-0, 1.5707964, 0)
                point3f urdf:collision:origin:xyz = (0.001, 0, 0)
                float urdf:geometry:cylinder:length = 0.005
                float urdf:geometry:cylinder:radius = 0.005
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0.001, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "wrist_left_ft_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (0.000007346273, 0.000007346273, 0.000012640947)
                float mujoco:body:inertial:mass = 0.049939543
                point3f mujoco:body:inertial:pos = (0.00785, 0, 0)
                quatf mujoco:body:inertial:quat = (1, 0, 0, 0)
                point3f mujoco:body:pos = (0.00785, 0, 0)
                quatf mujoco:body:quat = (0.5, 0.5, 0.5, 0.5)
                point3f physics:centerOfMass = (0.00785, 0, 0)
                float3 physics:diagonalInertia = (0.000007346273, 0.000007346273, 0.000012640947)
                float physics:mass = 0.049939543
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0.000007346273
                float urdf:link:inertial:inertia:iyy = 0.000007346273
                float urdf:link:inertial:inertia:izz = 0.000012640947
                float urdf:link:inertial:mass = 0.049939543
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0.00785, 0, 0)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-2.220446049250313e-16, 0, 1, 0), (1, -2.220446049250313e-16, 2.220446049250313e-16, 0), (0.00785, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "wrist_left_ft_link_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.0225, -0.0225, -0.00785), (0.0225, 0.0225, 0.00785)]
                    double height = 0.0157
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.0225, 0.00785, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.0225
                    float urdf:geometry:cylinder:length = 0.0157
                    float urdf:geometry:cylinder:radius = 0.0225
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cylinder "wrist_left_ft_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.0225, -0.0225, -0.00785), (0.0225, 0.0225, 0.00785)]
                    double height = 0.0157
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.0225, 0.00785, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.0225
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0)
                    float urdf:geometry:cylinder:length = 0.0157
                    float urdf:geometry:cylinder:radius = 0.0225
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Xform "wrist_left_ft_tool_link" (
                    prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
                )
                {
                    float3 mujoco:body:inertial:diaginertia = (0.000006285839, 0.000006285839, 0.00001196505)
                    float mujoco:body:inertial:mass = 0.03828816
                    point3f mujoco:body:inertial:pos = (0, 0, 0.012725)
                    quatf mujoco:body:inertial:quat = (0.6532815, -0.27059805, 0.6532815, -0.27059805)
                    point3f mujoco:body:pos = (0, 0, 0.012725)
                    quatf mujoco:body:quat = (0.5, -0.5, -0.5, -0.5)
                    point3f physics:centerOfMass = (0, 0, 0.012725)
                    float3 physics:diagonalInertia = (0.000006285839, 0.000006285839, 0.00001196505)
                    float physics:mass = 0.03828816
                    quatf physics:principalAxes = (0.6532815, -0.27059805, 0.6532815, -0.27059805)
                    float urdf:link:inertial:inertia:ixx = 0.000006285839
                    float urdf:link:inertial:inertia:iyy = 0.000006285839
                    float urdf:link:inertial:inertia:izz = 0.00001196505
                    float urdf:link:inertial:mass = 0.03828816
                    float3 urdf:link:inertial:origin:rpy = (-1.5707964, 0.7853982, -1.5707964)
                    point3f urdf:link:inertial:origin:xyz = (0, 0, 0.012725)
                    matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, 1, 0), (1, 2.220446049250313e-16, -2.220446049250313e-16, 0), (-2.220446049250313e-16, 1, 0, 0), (0, 0, 0.012725, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cylinder "wrist_left_ft_tool_link_geom_visual_0" (
                        prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                    )
                    {
                        float3[] extent = [(-0.025, -0.025, -0.004875), (0.025, 0.025, 0.004875)]
                        double height = 0.00975
                        point3f mujoco:geom:pos = (0, 0, 0)
                        quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                        vector3f mujoco:geom:size = (0.025, 0.004875, 0)
                        uniform token mujoco:geom:type = "cylinder"
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0]
                        double radius = 0.025
                        float urdf:geometry:cylinder:length = 0.00975
                        float urdf:geometry:cylinder:radius = 0.025
                        float3 urdf:visual:origin:rpy = (-0, 1.5707964, 0)
                        point3f urdf:visual:origin:xyz = (0, 0, 0)
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cylinder "wrist_left_ft_tool_link_geom_collision_0" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                    )
                    {
                        float3[] extent = [(-0.025, -0.025, -0.004875), (0.025, 0.025, 0.004875)]
                        double height = 0.00975
                        point3f mujoco:geom:pos = (0, 0, 0)
                        quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                        vector3f mujoco:geom:size = (0.025, 0.004875, 0)
                        uniform token mujoco:geom:type = "cylinder"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0]
                        double radius = 0.025
                        float3 urdf:collision:origin:rpy = (-0, 1.5707964, 0)
                        point3f urdf:collision:origin:xyz = (0, 0, 0)
                        float urdf:geometry:cylinder:length = 0.00975
                        float urdf:geometry:cylinder:radius = 0.025
                        token visibility = "invisible"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Xform "gripper_left_tool_link" (
                        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                    )
                    {
                        point3f mujoco:body:pos = (0.01, 0, 0)
                        quatf mujoco:body:quat = (7.028377e-17, 0.70710677, 1.6311838e-17, -0.70710677)
                        matrix4d xformOp:transform = ( (4.440892098500626e-16, 0, -1, 0), (1.2246467991473532e-16, -1, 6.162975822039155e-32, 0), (-1, -1.224646799147353e-16, -4.440892098500626e-16, 0), (0.01, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Xform "gripper_left_link" (
                        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
                    )
                    {
                        float3 mujoco:body:inertial:diaginertia = (0.0014065169, 0.004091456, 0.0045767208)
                        float mujoco:body:inertial:mass = 1.1609281
                        point3f mujoco:body:inertial:pos = (0.055877235, -0.000006149214, -0.0000062163895)
                        quatf mujoco:body:inertial:quat = (0.43748784, 0.55551106, -0.43751392, 0.55551183)
                        point3f mujoco:body:pos = (0.01, 0, 0)
                        quatf mujoco:body:quat = (7.028377e-17, 0.70710677, 1.6311838e-17, -0.70710677)
                        point3f physics:centerOfMass = (0.055877235, -0.000006149214, -0.0000062163895)
                        float3 physics:diagonalInertia = (0.0014065169, 0.004091456, 0.0045767208)
                        float physics:mass = 1.1609281
                        quatf physics:principalAxes = (0.43748784, 0.55551106, -0.43751392, 0.55551183)
                        float urdf:link:inertial:inertia:ixx = 0.0014065169
                        float urdf:link:inertial:inertia:iyy = 0.004091456
                        float urdf:link:inertial:inertia:izz = 0.0045767208
                        float urdf:link:inertial:mass = 1.1609281
                        float3 urdf:link:inertial:origin:rpy = (-2.2082028, -1.5707594, -2.267614)
                        point3f urdf:link:inertial:origin:xyz = (0.055877235, -0.000006149214, -0.0000062163895)
                        matrix4d xformOp:transform = ( (4.440892098500626e-16, 0, -1, 0), (1.2246467991473532e-16, -1, 6.162975822039155e-32, 0), (-1, -1.224646799147353e-16, -4.440892098500626e-16, 0), (0.01, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Mesh "gripper_left_link_geom_visual_0_gripper_link" (
                            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                            prepend references = @./../assets/meshes/usd/gripper_link.usda@</gripper_link>
                        )
                        {
                            rel material:binding = </tiago_dual/arm_left_7_link/arm_left_tool_link/wrist_left_ft_link/wrist_left_ft_tool_link/gripper_left_link/gripper_left_link_geom_visual_0_gripper_link/Materials/M_White>
                            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
                            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_link>
                            point3f mujoco:geom:pos = (0, 0, 0)
                            quatf mujoco:geom:quat = (1, 0, 0, 0)
                            vector3f mujoco:geom:size = (1, 1, 1)
                            uniform token mujoco:geom:type = "mesh"
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0]
                            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_link.obj@
                            float3 urdf:geometry:mesh:scale = (1, 1, 1)
                            rel urdf:visual:material = </urdf/robot/materials/M_White>
                            float3 urdf:visual:origin:rpy = (0, -0, 0)
                            point3f urdf:visual:origin:xyz = (0, 0, 0)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Scope "Materials"
                            {
                                def Material "M_White" (
                                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                                )
                                {
                                }
                            }
                        }

                        def Mesh "gripper_left_link_geom_collision_0_gripper_link_collision" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                            prepend references = @./../assets/meshes/usd/gripper_link_collision.usda@</gripper_link_collision>
                        )
                        {
                            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_link_collision>
                            point3f mujoco:geom:pos = (0, 0, 0)
                            quatf mujoco:geom:quat = (1, 0, 0, 0)
                            vector3f mujoco:geom:size = (1, 1, 1)
                            uniform token mujoco:geom:type = "mesh"
                            uniform token physics:approximation = "convexHull"
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0]
                            float3 urdf:collision:origin:rpy = (0, -0, 0)
                            point3f urdf:collision:origin:xyz = (0, 0, 0)
                            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/gripper_link_collision.stl@
                            float3 urdf:geometry:mesh:scale = (1, 1, 1)
                            token visibility = "invisible"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "gripper_left_right_finger_joint" (
                            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
                        )
                        {
                            vector3f mujoco:joint:axis = (1, 0, 0)
                            point3f mujoco:joint:pos = (-0, -0, 6.162976e-33)
                            float2 mujoco:joint:range = (0, 0.045)
                            uniform token mujoco:joint:type = "slide"
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </tiago_dual/arm_left_7_link/arm_left_tool_link/wrist_left_ft_link/wrist_left_ft_tool_link/gripper_left_link>
                            rel physics:body1 = </tiago_dual/gripper_left_right_finger_link>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0, -6.162976e-33, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 3.2684115e-32, 0.7071068, -6.5368234e-33)
                            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.045
                            vector3f urdf:joint:axis = (1, 0, 0)
                            prepend rel urdf:joint:child = </tiago_dual/gripper_left_right_finger_link>
                            float urdf:joint:limit:effort = 1000
                            float urdf:joint:limit:lower = 0
                            float urdf:joint:limit:upper = 0.045
                            float urdf:joint:limit:velocity = 1000
                            float3 urdf:joint:origin:rpy = (1.3454695e-32, 0, -4.9303807e-32)
                            point3f urdf:joint:origin:xyz = (0, -6.162976e-33, 0)
                            prepend rel urdf:joint:parent = </tiago_dual/arm_left_7_link/arm_left_tool_link/wrist_left_ft_link/wrist_left_ft_tool_link/gripper_left_link>
                            uniform token urdf:joint:type = "prismatic"
                        }

                        def PhysicsPrismaticJoint "gripper_left_left_finger_joint" (
                            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
                        )
                        {
                            vector3f mujoco:joint:axis = (-1, 0, 0)
                            point3f mujoco:joint:pos = (-0, -0, 6.162976e-33)
                            float2 mujoco:joint:range = (0, 0.045)
                            uniform token mujoco:joint:type = "slide"
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </tiago_dual/arm_left_7_link/arm_left_tool_link/wrist_left_ft_link/wrist_left_ft_tool_link/gripper_left_link>
                            rel physics:body1 = </tiago_dual/gripper_left_left_finger_link>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0, -6.162976e-33, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, -6.5368234e-33, -0.7071068, -3.2684115e-32)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.045
                            vector3f urdf:joint:axis = (-1, 0, 0)
                            prepend rel urdf:joint:child = </tiago_dual/gripper_left_left_finger_link>
                            float urdf:joint:limit:effort = 1000
                            float urdf:joint:limit:lower = 0
                            float urdf:joint:limit:upper = 0.045
                            float urdf:joint:limit:velocity = 1000
                            float3 urdf:joint:origin:rpy = (1.3454695e-32, 0, -4.9303807e-32)
                            point3f urdf:joint:origin:xyz = (0, -6.162976e-33, 0)
                            prepend rel urdf:joint:parent = </tiago_dual/arm_left_7_link/arm_left_tool_link/wrist_left_ft_link/wrist_left_ft_tool_link/gripper_left_link>
                            uniform token urdf:joint:type = "prismatic"
                        }

                        def Xform "gripper_left_grasping_frame" (
                            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                        )
                        {
                            point3f mujoco:body:pos = (1.110223e-16, 0, -0.12)
                            quatf mujoco:body:quat = (0.49999815, -0.5, 0.5, 0.50000185)
                            matrix4d xformOp:transform = ( (-0.0000036732051031940216, 1.6653345369377348e-16, -0.9999999999932538, 0), (-0.9999999999865077, -0.0000036731731540839974, 0.0000036732051030829993, 0), (-0.0000036731731538619528, 0.999999999993254, 1.3492429395967065e-11, 0), (0, 0, -0.12, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }
            }
        }
    }

    def Xform "gripper_left_right_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.00002747981, 0.0024304127, 0.002448169)
        float mujoco:body:inertial:mass = 0.10103759
        point3f mujoco:body:inertial:pos = (-0.058255475, 1.1640191, 0.6821131)
        quatf mujoco:body:inertial:quat = (-0.054663375, 0.6971018, 0.066410996, 0.71179396)
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 2.773339e-32, -4.9303807e-32, -2.773339e-32)
        point3f physics:centerOfMass = (-0.058255475, 1.1640191, 0.6821131)
        float3 physics:diagonalInertia = (0.00002747981, 0.0024304127, 0.002448169)
        float physics:mass = 0.10103759
        quatf physics:principalAxes = (-0.054663375, 0.6971018, 0.066410996, 0.71179396)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00002747981
        float urdf:link:inertial:inertia:iyy = 0.0024304127
        float urdf:link:inertial:inertia:izz = 0.002448169
        float urdf:link:inertial:mass = 0.10103759
        float3 urdf:link:inertial:origin:rpy = (0.7602116, -1.5441923, 2.5528312)
        point3f urdf:link:inertial:origin:xyz = (-0.058255475, 1.1640191, 0.6821131)
        matrix4d xformOp:transform = ( (-9.957992501029616e-17, 4.440892098500626e-16, -1, 0), (1, 1.2246467991473517e-16, -9.957992501029616e-17, 0), (1.2246467991473502e-16, -1, -4.440892098500626e-16, 0), (-0.05443999947793758, 1.0150750094771386, 0.6864999995529649, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "gripper_left_right_finger_link_geom_visual_0_gripper_finger_link" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/gripper_finger_link.usda@</gripper_finger_link>
        )
        {
            rel material:binding = </tiago_dual/gripper_left_right_finger_link/gripper_left_right_finger_link_geom_visual_0_gripper_finger_link/Materials/M_Black>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_finger_link__1_000092625617981__0_9999073147773743_1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (-1.0000926, -0.9999073, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_finger_link.obj@
            float3 urdf:geometry:mesh:scale = (-1.0000926, -0.9999073, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Black>
            float3 urdf:visual:origin:rpy = (0, 0, -0.00009265359)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0000926450045753, 0.00009266217395046616, 0, 0), (-0.00009264500457511221, -0.9999073378260496, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Black" (
                    prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                )
                {
                }
            }
        }

        def Cube "gripper_left_right_finger_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            point3f mujoco:geom:pos = (0.005, 0, -0.165)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (0.005, 0.025, 0.055)
            uniform token mujoco:geom:type = "box"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415)
            point3f urdf:collision:origin:xyz = (0.005, 0, -0.165)
            float3 urdf:geometry:box:size = (0.01, 0.05, 0.11)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-0.004999999978538282, 4.6326794830245134e-7, 0, 0), (-0.000002316339741512256, -0.024999999892691405, 0, 0), (0, 0, 0.055, 0), (0.005, 0, -0.165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "gripper_left_left_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000028091548, 0.002429843, 0.0024481271)
        float mujoco:body:inertial:mass = 0.10103759
        point3f mujoco:body:inertial:pos = (-0.058255475, 1.1640191, 0.6875566)
        quatf mujoco:body:inertial:quat = (0.6956858, -0.091258466, 0.70776117, 0.08226366)
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 2.773339e-32, -4.9303807e-32, -2.773339e-32)
        point3f physics:centerOfMass = (-0.058255475, 1.1640191, 0.6875566)
        float3 physics:diagonalInertia = (0.000028091548, 0.002429843, 0.0024481271)
        float physics:mass = 0.10103759
        quatf physics:principalAxes = (0.6956858, -0.091258466, 0.70776117, 0.08226366)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000028091548
        float urdf:link:inertial:inertia:iyy = 0.002429843
        float urdf:link:inertial:inertia:izz = 0.0024481271
        float urdf:link:inertial:mass = 0.10103759
        float3 urdf:link:inertial:origin:rpy = (-2.6243865, 1.5495018, -2.378355)
        point3f urdf:link:inertial:origin:xyz = (-0.058255475, 1.1640191, 0.6875566)
        matrix4d xformOp:transform = ( (-9.957992501029616e-17, 4.440892098500626e-16, -1, 0), (1, 1.2246467991473517e-16, -9.957992501029616e-17, 0), (1.2246467991473502e-16, -1, -4.440892098500626e-16, 0), (-0.05443999947793758, 1.0150750094771386, 0.6864999995529649, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "gripper_left_left_finger_link_geom_visual_0_gripper_finger_link" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/gripper_finger_link.usda@</gripper_finger_link>
        )
        {
            rel material:binding = </tiago_dual/gripper_left_left_finger_link/gripper_left_left_finger_link_geom_visual_0_gripper_finger_link/Materials/M_Black>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_finger_link_1_000092625617981_0_9999073147773743_1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (1.0000926, 0.9999073, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_finger_link.obj@
            float3 urdf:geometry:mesh:scale = (1.0000926, 0.9999073, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Black>
            float3 urdf:visual:origin:rpy = (0, -0, 3.1415)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0000926450045755, 0.00009266217395046619, 0, 0), (-0.00009264500457511223, -0.9999073378260498, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Black" (
                    prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                )
                {
                }
            }
        }

        def Cube "gripper_left_left_finger_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            point3f mujoco:geom:pos = (-0.005, 0, -0.165)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (0.005, 0.025, 0.055)
            uniform token mujoco:geom:type = "box"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415)
            point3f urdf:collision:origin:xyz = (-0.005, 0, -0.165)
            float3 urdf:geometry:box:size = (0.01, 0.05, 0.11)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-0.004999999978538282, 4.6326794830245134e-7, 0, 0), (-0.000002316339741512256, -0.024999999892691405, 0, 0), (0, 0, 0.055, 0), (-0.005, 0, -0.165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "arm_right_1_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.002655229, 0.024643911, 0.02477995)
        float mujoco:body:inertial:mass = 2.3265564
        point3f mujoco:body:inertial:pos = (-0.0104647335, -0.26109612, 0.70683265)
        quatf mujoco:body:inertial:quat = (0.93972987, -0.269646, 0.050450835, 0.20409207)
        point3f mujoco:body:pos = (0.02556, -0.19, -0.171)
        quatf mujoco:body:quat = (0.70710677, 0, 0, -0.70710677)
        point3f physics:centerOfMass = (-0.0104647335, -0.26109612, 0.70683265)
        float3 physics:diagonalInertia = (0.002655229, 0.024643911, 0.02477995)
        float physics:mass = 2.3265564
        quatf physics:principalAxes = (0.93972987, -0.269646, 0.050450835, 0.20409207)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.002655229
        float urdf:link:inertial:inertia:iyy = 0.024643911
        float urdf:link:inertial:inertia:izz = 0.02477995
        float urdf:link:inertial:mass = 2.3265564
        float3 urdf:link:inertial:origin:rpy = (-0.51983076, 0.20634675, 0.37266532)
        point3f urdf:link:inertial:origin:xyz = (-0.0104647335, -0.26109612, 0.70683265)
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (-0.03643999908864498, -0.1899999976158142, 0.7174999990463257, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_1_link_geom_visual_0_arm_1" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_1.usda@</arm_1>
        )
        {
            rel material:binding = </tiago_dual/arm_right_1_link/arm_right_1_link_geom_visual_0_arm_1/Materials/M_White>
            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_1__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (3.7493994e-33, 6.123234e-17, 1, 6.123234e-17)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_1.obj@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            rel urdf:visual:material = </urdf/robot/materials/M_White>
            float3 urdf:visual:origin:rpy = (3.1415927, -0, 3.1415927)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (-1.2246467991473532e-16, -1, -1.2246467991473532e-16, 0), (-1.4997597826618582e-32, -1.2246467991473537e-16, 1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_White" (
                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                )
                {
                }
            }
        }

        def Mesh "arm_right_1_link_geom_collision_0_arm_1_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_1_collision.usda@</arm_1_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_1_collision__1_0__1_0__1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (3.7493994e-33, 6.123234e-17, 1, 6.123234e-17)
            vector3f mujoco:geom:size = (-1, -1, -1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (3.1415927, -0, 3.1415927)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_1_collision.stl@
            float3 urdf:geometry:mesh:scale = (-1, -1, -1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1.0000000000000004, -1.2246467991473537e-16, 0, 0), (-1.2246467991473532e-16, -1, -1.2246467991473532e-16, 0), (-1.4997597826618582e-32, -1.2246467991473537e-16, 1.0000000000000004, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.1780972, 1.5707964)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_1_link>
            rel physics:body1 = </tiago_dual/arm_right_2_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.125, -0.0195, -0.031)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, -0.70710677, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -67.5
            float physics:upperLimit = 90
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_2_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.1780972
            float urdf:joint:limit:upper = 1.5707964
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-1.5707964, 0, 0)
            point3f urdf:joint:origin:xyz = (0.125, -0.0195, -0.031)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_1_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_2_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0018821029, 0.0033415968, 0.0034246366)
        float mujoco:body:inertial:mass = 1.2833431
        point3f mujoco:body:inertial:pos = (-0.04783889, -0.3396865, 0.6863976)
        quatf mujoco:body:inertial:quat = (0.004454122, 0.9991291, 0.0009602802, -0.041475654)
        point3f mujoco:body:pos = (0.125, -0.0195, -0.031)
        quatf mujoco:body:quat = (0.70710677, -0.70710677, 0, 0)
        point3f physics:centerOfMass = (-0.04783889, -0.3396865, 0.6863976)
        float3 physics:diagonalInertia = (0.0018821029, 0.0033415968, 0.0034246366)
        float physics:mass = 1.2833431
        quatf physics:principalAxes = (0.004454122, 0.9991291, 0.0009602802, -0.041475654)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0018821029
        float urdf:link:inertial:inertia:iyy = 0.0033415968
        float urdf:link:inertial:inertia:izz = 0.0034246366
        float urdf:link:inertial:mass = 1.2833431
        float3 urdf:link:inertial:origin:rpy = (3.1327412, 0.08298283, 0.0015547633)
        point3f urdf:link:inertial:origin:xyz = (-0.04783889, -0.3396865, 0.6863976)
        matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (2.220446049250313e-16, 4.930380657631324e-32, -1, 0), (1, 2.220446049250313e-16, 2.220446049250313e-16, 0), (-0.055939999490976305, -0.3149999976158142, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_2_link_geom_visual_0_arm_2" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_2.usda@</arm_2>
        )
        {
            rel material:binding = </tiago_dual/arm_right_2_link/arm_right_2_link_geom_visual_0_arm_2/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_2>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_2.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_right_2_link_geom_collision_0_arm_2_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_2_collision.usda@</arm_2_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_2_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_2_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_3_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-0.7853982, 3.9269907)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_2_link>
            rel physics:body1 = </tiago_dual/arm_right_3_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.0895, 0, -0.0015)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.5, 0.5, 0.5, -0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -45
            float physics:upperLimit = 225
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_3_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.7853982
            float urdf:joint:limit:upper = 3.9269907
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-1.5707964, -0, 1.5707964)
            point3f urdf:joint:origin:xyz = (0.0895, 0, -0.0015)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_2_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_3_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.005868875, 0.08974361, 0.090422876)
        float mujoco:body:inertial:mass = 4.2203827
        point3f mujoco:body:inertial:pos = (-0.06356949, -0.5258976, 0.6934171)
        quatf mujoco:body:inertial:quat = (-0.35075223, -0.58708674, -0.41339532, 0.60117084)
        point3f mujoco:body:pos = (0.0895, 0, -0.0015)
        quatf mujoco:body:quat = (-0.5, 0.5, 0.5, -0.5)
        point3f physics:centerOfMass = (-0.06356949, -0.5258976, 0.6934171)
        float3 physics:diagonalInertia = (0.005868875, 0.08974361, 0.090422876)
        float physics:mass = 4.2203827
        quatf physics:principalAxes = (-0.35075223, -0.58708674, -0.41339532, 0.60117084)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.005868875
        float urdf:link:inertial:inertia:iyy = 0.08974361
        float urdf:link:inertial:inertia:izz = 0.090422876
        float urdf:link:inertial:mass = 4.2203827
        float3 urdf:link:inertial:origin:rpy = (-1.9211397, 1.479963, 2.3634467)
        point3f urdf:link:inertial:origin:xyz = (-0.06356949, -0.5258976, 0.6934171)
        matrix4d xformOp:transform = ( (2.2204460492503126e-16, 2.2204460492503136e-16, -1, 0), (-1, -4.440892098500626e-16, -2.220446049250313e-16, 0), (-4.440892098500626e-16, 1, 2.2204460492503126e-16, 0), (-0.0574399995040148, -0.40450000017881393, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_3_link_geom_visual_0_arm_3" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_3.usda@</arm_3>
        )
        {
            rel material:binding = </tiago_dual/arm_right_3_link/arm_right_3_link_geom_visual_0_arm_3/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_3>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_3.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_right_3_link_geom_collision_0_arm_3_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_3_collision.usda@</arm_3_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_3_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_3_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_4_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (-5.551115e-17, -1.2325952e-32, 1.2325952e-32)
            float2 mujoco:joint:range = (-0.3926991, 2.3561945)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_3_link>
            rel physics:body1 = </tiago_dual/arm_right_4_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.02, -0.027, -0.222)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -22.5
            float physics:upperLimit = 135
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_4_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.3926991
            float urdf:joint:limit:upper = 2.3561945
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-1.5707964, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (-0.02, -0.027, -0.222)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_3_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_4_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.005166411, 0.043154817, 0.04374337)
        float mujoco:body:inertial:mass = 3.670089
        point3f mujoco:body:inertial:pos = (-0.050609194, -0.7061768, 0.69345737)
        quatf mujoco:body:inertial:quat = (0.9669659, 0.22171928, 0.08499586, -0.092699245)
        point3f mujoco:body:pos = (-0.02, -0.027, -0.222)
        quatf mujoco:body:quat = (-0.5, 0.5, 0.5, 0.5)
        point3f physics:centerOfMass = (-0.050609194, -0.7061768, 0.69345737)
        float3 physics:diagonalInertia = (0.005166411, 0.043154817, 0.04374337)
        float physics:mass = 3.670089
        quatf physics:principalAxes = (0.9669659, 0.22171928, 0.08499586, -0.092699245)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.005166411
        float urdf:link:inertial:inertia:iyy = 0.043154817
        float urdf:link:inertial:inertia:izz = 0.04374337
        float urdf:link:inertial:mass = 3.670089
        float3 urdf:link:inertial:origin:rpy = (0.43569198, 0.20695683, -0.14518021)
        point3f urdf:link:inertial:origin:xyz = (-0.050609194, -0.7061768, 0.69345737)
        matrix4d xformOp:transform = ( (-4.4408920985006257e-16, 1, -4.930380657631324e-32, 0), (4.440892098500626e-16, 1.4791141972893971e-31, -1, 0), (-1, -4.4408920985006257e-16, -4.440892098500626e-16, 0), (-0.03043999880366013, -0.6265000030398369, 0.7064999991059303, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_4_link_geom_visual_0_arm_4" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_4.usda@</arm_4>
        )
        {
            rel material:binding = </tiago_dual/arm_right_4_link/arm_right_4_link_geom_visual_0_arm_4/Materials/M_DarkGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_DarkGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_4>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_4.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_DarkGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_DarkGrey" (
                    prepend references = @./../assets/materials/usd/M_DarkGrey.usda@</M_DarkGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_right_4_link_geom_collision_0_arm_4_collision" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_4_collision.usda@</arm_4_collision>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_4_collision>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_4_collision.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_5_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, -3.469447e-18, -1.540744e-33)
            float2 mujoco:joint:range = (-2.0943952, 2.0943952)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_4_link>
            rel physics:body1 = </tiago_dual/arm_right_5_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.162, 0.02, 0.027)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, -0.70710677, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120
            float physics:upperLimit = 120
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_5_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -2.0943952
            float urdf:joint:limit:upper = 2.0943952
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-0, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (-0.162, 0.02, 0.027)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_4_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_5_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.006034792, 0.02849563, 0.029476222)
        float mujoco:body:inertial:mass = 3.0939374
        point3f mujoco:body:inertial:pos = (-0.052842487, -0.8697792, 0.686379)
        quatf mujoco:body:inertial:quat = (-0.001274745, 0.6893705, 0.0034514684, 0.72439957)
        point3f mujoco:body:pos = (-0.162, 0.02, 0.027)
        quatf mujoco:body:quat = (0.70710677, 0, -0.70710677, 0)
        point3f physics:centerOfMass = (-0.052842487, -0.8697792, 0.686379)
        float3 physics:diagonalInertia = (0.006034792, 0.02849563, 0.029476222)
        float physics:mass = 3.0939374
        quatf physics:principalAxes = (-0.001274745, 0.6893705, 0.0034514684, 0.72439957)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.006034792
        float urdf:link:inertial:inertia:iyy = 0.02849563
        float urdf:link:inertial:inertia:izz = 0.029476222
        float urdf:link:inertial:mass = 3.0939374
        float3 urdf:link:inertial:origin:rpy = (0.06540369, -1.5211571, 3.082875)
        point3f urdf:link:inertial:origin:xyz = (-0.052842487, -0.8697792, 0.686379)
        matrix4d xformOp:transform = ( (-1, -2.2204460492503126e-16, -4.440892098500626e-16, 0), (4.440892098500626e-16, 1.4791141972893971e-31, -1, 0), (2.2204460492503126e-16, -1, -4.930380657631324e-32, 0), (-0.05743999950401463, -0.788500003516674, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_5_link_geom_visual_0_arm_5_wrist_2017" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_5_wrist_2017.usda@</arm_5_wrist_2017>
        )
        {
            rel material:binding = </tiago_dual/arm_right_5_link/arm_right_5_link_geom_visual_0_arm_5_wrist_2017/Materials/M_LightGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_LightGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_5_wrist_2017>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_5-wrist-2017.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_LightGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_LightGrey" (
                    prepend references = @./../assets/materials/usd/M_LightGrey.usda@</M_LightGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_right_5_link_geom_collision_0_arm_5_collision_wrist_2017" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_5_collision_wrist_2017.usda@</arm_5_collision_wrist_2017>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_5_collision_wrist_2017>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_5_collision_wrist_2017.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_6_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-1.4137167, 1.4137167)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_5_link>
            rel physics:body1 = </tiago_dual/arm_right_6_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0.15)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -81
            float physics:upperLimit = 81
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_6_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -1.4137167
            float urdf:joint:limit:upper = 1.4137167
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (-1.5707964, -1.5707964, 0)
            point3f urdf:joint:origin:xyz = (-0, -0, 0.15)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_5_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_6_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.0001605233, 0.00039506948, 0.00048799763)
        float mujoco:body:inertial:mass = 0.39394847
        point3f mujoco:body:inertial:pos = (-0.057443894, -0.95006484, 0.6864821)
        quatf mujoco:body:inertial:quat = (0.99999845, 0.000989691, 0.00003206327, 0.0014668669)
        point3f mujoco:body:pos = (0, 0, 0.15)
        quatf mujoco:body:quat = (-0.5, 0.5, 0.5, 0.5)
        point3f physics:centerOfMass = (-0.057443894, -0.95006484, 0.6864821)
        float3 physics:diagonalInertia = (0.0001605233, 0.00039506948, 0.00048799763)
        float physics:mass = 0.39394847
        quatf physics:principalAxes = (0.99999845, 0.000989691, 0.00003206327, 0.0014668669)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.0001605233
        float urdf:link:inertial:inertia:iyy = 0.00039506948
        float urdf:link:inertial:inertia:izz = 0.00048799763
        float urdf:link:inertial:mass = 0.39394847
        float3 urdf:link:inertial:origin:rpy = (0.0019794742, 0.00006122295, 0.002933797)
        point3f urdf:link:inertial:origin:xyz = (-0.057443894, -0.95006484, 0.6864821)
        matrix4d xformOp:transform = ( (-4.930380657631324e-32, -1, -1.4791141972893971e-31, 0), (-1, 4.930380657631324e-32, -2.220446049250313e-16, 0), (2.220446049250313e-16, 9.860761315262648e-32, -1, 0), (-0.05743999950401459, -0.9385000094771385, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "arm_right_6_link_geom_visual_0_arm_6_wrist_2017" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_6_wrist_2017.usda@</arm_6_wrist_2017>
        )
        {
            rel material:binding = </tiago_dual/arm_right_6_link/arm_right_6_link_geom_visual_0_arm_6_wrist_2017/Materials/M_LightGrey>
            rel mujoco:geom:material = </mujoco/asset/materials/M_LightGrey>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_6_wrist_2017>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/arm_6-wrist-2017.obj@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_LightGrey>
            float3 urdf:visual:origin:rpy = (0, -0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_LightGrey" (
                    prepend references = @./../assets/materials/usd/M_LightGrey.usda@</M_LightGrey>
                )
                {
                }
            }
        }

        def Mesh "arm_right_6_link_geom_collision_0_arm_6_collision_wrist_2017" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/arm_6_collision_wrist_2017.usda@</arm_6_collision_wrist_2017>
        )
        {
            rel mujoco:geom:mesh = </mujoco/asset/meshes/arm_6_collision_wrist_2017>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (1, 0, 0, 0)
            vector3f mujoco:geom:size = (1, 1, 1)
            uniform token mujoco:geom:type = "mesh"
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/arm_6_collision_wrist_2017.stl@
            float3 urdf:geometry:mesh:scale = (1, 1, 1)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "arm_right_7_joint" (
            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
        )
        {
            vector3f mujoco:joint:axis = (0, 0, 1)
            point3f mujoco:joint:pos = (0, 0, 0)
            float2 mujoco:joint:range = (-2.0943952, 2.0943952)
            uniform token mujoco:joint:type = "hinge"
            uniform token physics:axis = "Z"
            rel physics:body0 = </tiago_dual/arm_right_6_link>
            rel physics:body1 = </tiago_dual/arm_right_7_link>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.5, 0.5, 0.5, 0.5)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -120
            float physics:upperLimit = 120
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </tiago_dual/arm_right_7_link>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -2.0943952
            float urdf:joint:limit:upper = 2.0943952
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (1.5707964, -0, 1.5707964)
            point3f urdf:joint:origin:xyz = (0, 0, 0)
            prepend rel urdf:joint:parent = </tiago_dual/arm_right_6_link>
            uniform token urdf:joint:type = "revolute"
        }
    }

    def Xform "arm_right_7_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (0.5, 0.5, 0.5, 0.5)
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-1, 2.2204460492503136e-16, -2.220446049250313e-16, 0), (2.220446049250313e-16, -2.220446049250312e-16, -1, 0), (-2.220446049250314e-16, -1, 2.220446049250311e-16, 0), (-0.05743999950401459, -0.9385000094771385, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "arm_right_tool_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (7.330383e-9, 7.330383e-9, 9.817477e-9)
            float mujoco:body:inertial:mass = 0.0007853982
            point3f mujoco:body:inertial:pos = (0, 0, 0.047)
            quatf mujoco:body:inertial:quat = (0, 0.70710677, 0, 0.70710677)
            point3f mujoco:body:pos = (-6.938894e-18, 0, 0.046)
            quatf mujoco:body:quat = (-0.5, 0.5, 0.5, 0.5)
            point3f physics:centerOfMass = (0, 0, 0.047)
            float3 physics:diagonalInertia = (7.330383e-9, 7.330383e-9, 9.817477e-9)
            float physics:mass = 0.0007853982
            quatf physics:principalAxes = (0, 0.70710677, 0, 0.70710677)
            float urdf:link:inertial:inertia:ixx = 7.330383e-9
            float urdf:link:inertial:inertia:iyy = 7.330383e-9
            float urdf:link:inertial:inertia:izz = 9.817477e-9
            float urdf:link:inertial:mass = 0.0007853982
            float3 urdf:link:inertial:origin:rpy = (3.1415927, -1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0.047)
            matrix4d xformOp:transform = ( (1.1102230246251565e-16, -5.551115123125783e-17, 1, 0), (1, -4.440892098500626e-16, -5.551115123125783e-17, 0), (4.996003610813204e-16, 1, 1.1102230246251565e-16, 0), (0, 0, 0.046, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "arm_right_tool_link_geom_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.005, -0.005, -0.0025), (0.005, 0.005, 0.0025)]
                double height = 0.005
                point3f mujoco:geom:pos = (0.001, 0, 0)
                quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                vector3f mujoco:geom:size = (0.005, 0.0025, 0)
                uniform token mujoco:geom:type = "cylinder"
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.005
                float urdf:geometry:cylinder:length = 0.005
                float urdf:geometry:cylinder:radius = 0.005
                float3 urdf:visual:origin:rpy = (-0, 1.5707964, 0)
                point3f urdf:visual:origin:xyz = (0.001, 0, 0)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0.001, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "arm_right_tool_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.005, -0.005, -0.0025), (0.005, 0.005, 0.0025)]
                double height = 0.005
                point3f mujoco:geom:pos = (0.001, 0, 0)
                quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                vector3f mujoco:geom:size = (0.005, 0.0025, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(1, 0, 0)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.005
                float3 urdf:collision:origin:rpy = (-0, 1.5707964, 0)
                point3f urdf:collision:origin:xyz = (0.001, 0, 0)
                float urdf:geometry:cylinder:length = 0.005
                float urdf:geometry:cylinder:radius = 0.005
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0.001, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Xform "wrist_right_ft_link" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (0.000007346273, 0.000007346273, 0.000012640947)
                float mujoco:body:inertial:mass = 0.049939543
                point3f mujoco:body:inertial:pos = (0.00785, 0, 0)
                quatf mujoco:body:inertial:quat = (1, 0, 0, 0)
                point3f mujoco:body:pos = (0.00785, -6.938894e-18, 1.110223e-16)
                quatf mujoco:body:quat = (0.5, 0.5, 0.5, 0.5)
                point3f physics:centerOfMass = (0.00785, 0, 0)
                float3 physics:diagonalInertia = (0.000007346273, 0.000007346273, 0.000012640947)
                float physics:mass = 0.049939543
                quatf physics:principalAxes = (1, 0, 0, 0)
                float urdf:link:inertial:inertia:ixx = 0.000007346273
                float urdf:link:inertial:inertia:iyy = 0.000007346273
                float urdf:link:inertial:inertia:izz = 0.000012640947
                float urdf:link:inertial:mass = 0.049939543
                float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
                point3f urdf:link:inertial:origin:xyz = (0.00785, 0, 0)
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-2.220446049250313e-16, 0, 1, 0), (1, -2.220446049250313e-16, 2.220446049250313e-16, 0), (0.00785, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cylinder "wrist_right_ft_link_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.0225, -0.0225, -0.00785), (0.0225, 0.0225, 0.00785)]
                    double height = 0.0157
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.0225, 0.00785, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.0225
                    float urdf:geometry:cylinder:length = 0.0157
                    float urdf:geometry:cylinder:radius = 0.0225
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (0, 0, 0)
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cylinder "wrist_right_ft_link_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-0.0225, -0.0225, -0.00785), (0.0225, 0.0225, 0.00785)]
                    double height = 0.0157
                    point3f mujoco:geom:pos = (0, 0, 0)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.0225, 0.00785, 0)
                    uniform token mujoco:geom:type = "cylinder"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(1, 0, 0)]
                    float[] primvars:displayOpacity = [0]
                    double radius = 0.0225
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (0, 0, 0)
                    float urdf:geometry:cylinder:length = 0.0157
                    float urdf:geometry:cylinder:radius = 0.0225
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Xform "wrist_right_ft_tool_link" (
                    prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
                )
                {
                    float3 mujoco:body:inertial:diaginertia = (0.000006285839, 0.000006285839, 0.00001196505)
                    float mujoco:body:inertial:mass = 0.03828816
                    point3f mujoco:body:inertial:pos = (0, 0, 0.012725)
                    quatf mujoco:body:inertial:quat = (0.6532815, -0.27059805, 0.6532815, -0.27059805)
                    point3f mujoco:body:pos = (0, 0, 0.012725)
                    quatf mujoco:body:quat = (0.5, -0.5, -0.5, -0.5)
                    point3f physics:centerOfMass = (0, 0, 0.012725)
                    float3 physics:diagonalInertia = (0.000006285839, 0.000006285839, 0.00001196505)
                    float physics:mass = 0.03828816
                    quatf physics:principalAxes = (0.6532815, -0.27059805, 0.6532815, -0.27059805)
                    float urdf:link:inertial:inertia:ixx = 0.000006285839
                    float urdf:link:inertial:inertia:iyy = 0.000006285839
                    float urdf:link:inertial:inertia:izz = 0.00001196505
                    float urdf:link:inertial:mass = 0.03828816
                    float3 urdf:link:inertial:origin:rpy = (-1.5707964, 0.7853982, -1.5707964)
                    point3f urdf:link:inertial:origin:xyz = (0, 0, 0.012725)
                    matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, 1, 0), (1, 2.220446049250313e-16, -2.220446049250313e-16, 0), (-2.220446049250313e-16, 1, 0, 0), (0, 0, 0.012725, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]

                    def Cylinder "wrist_right_ft_tool_link_geom_visual_0" (
                        prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                    )
                    {
                        float3[] extent = [(-0.025, -0.025, -0.004875), (0.025, 0.025, 0.004875)]
                        double height = 0.00975
                        point3f mujoco:geom:pos = (0, 0, 0)
                        quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                        vector3f mujoco:geom:size = (0.025, 0.004875, 0)
                        uniform token mujoco:geom:type = "cylinder"
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0]
                        double radius = 0.025
                        float urdf:geometry:cylinder:length = 0.00975
                        float urdf:geometry:cylinder:radius = 0.025
                        float3 urdf:visual:origin:rpy = (-0, 1.5707964, 0)
                        point3f urdf:visual:origin:xyz = (0, 0, 0)
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Cylinder "wrist_right_ft_tool_link_geom_collision_0" (
                        prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
                    )
                    {
                        float3[] extent = [(-0.025, -0.025, -0.004875), (0.025, 0.025, 0.004875)]
                        double height = 0.00975
                        point3f mujoco:geom:pos = (0, 0, 0)
                        quatf mujoco:geom:quat = (0.70710677, 0, 0.70710677, 0)
                        vector3f mujoco:geom:size = (0.025, 0.004875, 0)
                        uniform token mujoco:geom:type = "cylinder"
                        bool physics:collisionEnabled = 1
                        color3f[] primvars:displayColor = [(1, 0, 0)]
                        float[] primvars:displayOpacity = [0]
                        double radius = 0.025
                        float3 urdf:collision:origin:rpy = (-0, 1.5707964, 0)
                        point3f urdf:collision:origin:xyz = (0, 0, 0)
                        float urdf:geometry:cylinder:length = 0.00975
                        float urdf:geometry:cylinder:radius = 0.025
                        token visibility = "invisible"
                        matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, -1, 0), (0, 1, 0, 0), (1, 0, 2.220446049250313e-16, 0), (0, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Xform "gripper_right_tool_link" (
                        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                    )
                    {
                        point3f mujoco:body:pos = (0.01, -6.938894e-18, 0)
                        quatf mujoco:body:quat = (7.028377e-17, 0.70710677, 1.6311838e-17, -0.70710677)
                        matrix4d xformOp:transform = ( (4.440892098500626e-16, 0, -1, 0), (1.2246467991473532e-16, -1, 6.162975822039155e-32, 0), (-1, -1.224646799147353e-16, -4.440892098500626e-16, 0), (0.01, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]
                    }

                    def Xform "gripper_right_link" (
                        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
                    )
                    {
                        float3 mujoco:body:inertial:diaginertia = (0.0014065169, 0.004091456, 0.0045767208)
                        float mujoco:body:inertial:mass = 1.1609281
                        point3f mujoco:body:inertial:pos = (0.055877235, -0.000006149214, -0.0000062163895)
                        quatf mujoco:body:inertial:quat = (0.43748784, 0.55551106, -0.43751392, 0.55551183)
                        point3f mujoco:body:pos = (0.01, -6.938894e-18, 0)
                        quatf mujoco:body:quat = (7.028377e-17, 0.70710677, 1.6311838e-17, -0.70710677)
                        point3f physics:centerOfMass = (0.055877235, -0.000006149214, -0.0000062163895)
                        float3 physics:diagonalInertia = (0.0014065169, 0.004091456, 0.0045767208)
                        float physics:mass = 1.1609281
                        quatf physics:principalAxes = (0.43748784, 0.55551106, -0.43751392, 0.55551183)
                        float urdf:link:inertial:inertia:ixx = 0.0014065169
                        float urdf:link:inertial:inertia:iyy = 0.004091456
                        float urdf:link:inertial:inertia:izz = 0.0045767208
                        float urdf:link:inertial:mass = 1.1609281
                        float3 urdf:link:inertial:origin:rpy = (-2.2082028, -1.5707594, -2.267614)
                        point3f urdf:link:inertial:origin:xyz = (0.055877235, -0.000006149214, -0.0000062163895)
                        matrix4d xformOp:transform = ( (4.440892098500626e-16, 0, -1, 0), (1.2246467991473532e-16, -1, 6.162975822039155e-32, 0), (-1, -1.224646799147353e-16, -4.440892098500626e-16, 0), (0.01, 0, 0, 1) )
                        uniform token[] xformOpOrder = ["xformOp:transform"]

                        def Mesh "gripper_right_link_geom_visual_0_gripper_link" (
                            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                            prepend references = @./../assets/meshes/usd/gripper_link.usda@</gripper_link>
                        )
                        {
                            rel material:binding = </tiago_dual/arm_right_7_link/arm_right_tool_link/wrist_right_ft_link/wrist_right_ft_tool_link/gripper_right_link/gripper_right_link_geom_visual_0_gripper_link/Materials/M_White>
                            rel mujoco:geom:material = </mujoco/asset/materials/M_White>
                            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_link>
                            point3f mujoco:geom:pos = (0, 0, 0)
                            quatf mujoco:geom:quat = (1, 0, 0, 0)
                            vector3f mujoco:geom:size = (1, 1, 1)
                            uniform token mujoco:geom:type = "mesh"
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0]
                            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_link.obj@
                            float3 urdf:geometry:mesh:scale = (1, 1, 1)
                            rel urdf:visual:material = </urdf/robot/materials/M_White>
                            float3 urdf:visual:origin:rpy = (0, -0, 0)
                            point3f urdf:visual:origin:xyz = (0, 0, 0)
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]

                            def Scope "Materials"
                            {
                                def Material "M_White" (
                                    prepend references = @./../assets/materials/usd/M_White.usda@</M_White>
                                )
                                {
                                }
                            }
                        }

                        def Mesh "gripper_right_link_geom_collision_0_gripper_link_collision" (
                            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                            prepend references = @./../assets/meshes/usd/gripper_link_collision.usda@</gripper_link_collision>
                        )
                        {
                            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_link_collision>
                            point3f mujoco:geom:pos = (0, 0, 0)
                            quatf mujoco:geom:quat = (1, 0, 0, 0)
                            vector3f mujoco:geom:size = (1, 1, 1)
                            uniform token mujoco:geom:type = "mesh"
                            uniform token physics:approximation = "convexHull"
                            bool physics:collisionEnabled = 1
                            color3f[] primvars:displayColor = [(1, 0, 0)]
                            float[] primvars:displayOpacity = [0]
                            float3 urdf:collision:origin:rpy = (0, -0, 0)
                            point3f urdf:collision:origin:xyz = (0, 0, 0)
                            asset urdf:geometry:mesh:filename = @./../assets/meshes/stl/gripper_link_collision.stl@
                            float3 urdf:geometry:mesh:scale = (1, 1, 1)
                            token visibility = "invisible"
                            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }

                        def PhysicsPrismaticJoint "gripper_right_right_finger_joint" (
                            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
                        )
                        {
                            vector3f mujoco:joint:axis = (1, 0, 0)
                            point3f mujoco:joint:pos = (-3.081488e-33, -3.081488e-33, 1.3877788e-17)
                            float2 mujoco:joint:range = (0, 0.045)
                            uniform token mujoco:joint:type = "slide"
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </tiago_dual/arm_right_7_link/arm_right_tool_link/wrist_right_ft_link/wrist_right_ft_tool_link/gripper_right_link>
                            rel physics:body1 = </tiago_dual/gripper_right_right_finger_link>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0, 0, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, 9.5973545e-33, 0.7071068, -1.9710607e-33)
                            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.045
                            vector3f urdf:joint:axis = (1, 0, 0)
                            prepend rel urdf:joint:child = </tiago_dual/gripper_right_right_finger_link>
                            float urdf:joint:limit:effort = 1000
                            float urdf:joint:limit:lower = 0
                            float urdf:joint:limit:upper = 0.045
                            float urdf:joint:limit:velocity = 1000
                            float3 urdf:joint:origin:rpy = (-2.9907776e-33, 0, 1.2325952e-32)
                            point3f urdf:joint:origin:xyz = (0, 0, 0)
                            prepend rel urdf:joint:parent = </tiago_dual/arm_right_7_link/arm_right_tool_link/wrist_right_ft_link/wrist_right_ft_tool_link/gripper_right_link>
                            uniform token urdf:joint:type = "prismatic"
                        }

                        def PhysicsPrismaticJoint "gripper_right_left_finger_joint" (
                            prepend apiSchemas = ["UrdfJointAPI", "MujocoJointAPI"]
                        )
                        {
                            vector3f mujoco:joint:axis = (-1, 0, 0)
                            point3f mujoco:joint:pos = (-3.081488e-33, -3.081488e-33, 1.3877788e-17)
                            float2 mujoco:joint:range = (0, 0.045)
                            uniform token mujoco:joint:type = "slide"
                            uniform token physics:axis = "Z"
                            rel physics:body0 = </tiago_dual/arm_right_7_link/arm_right_tool_link/wrist_right_ft_link/wrist_right_ft_tool_link/gripper_right_link>
                            rel physics:body1 = </tiago_dual/gripper_right_left_finger_link>
                            bool physics:collisionEnabled = 0
                            point3f physics:localPos0 = (0, 0, 0)
                            point3f physics:localPos1 = (0, 0, 0)
                            quatf physics:localRot0 = (0.7071068, -1.9710607e-33, -0.7071068, -9.5973545e-33)
                            quatf physics:localRot1 = (0.7071068, 0, -0.7071068, 0)
                            float physics:lowerLimit = 0
                            float physics:upperLimit = 0.045
                            vector3f urdf:joint:axis = (-1, 0, 0)
                            prepend rel urdf:joint:child = </tiago_dual/gripper_right_left_finger_link>
                            float urdf:joint:limit:effort = 1000
                            float urdf:joint:limit:lower = 0
                            float urdf:joint:limit:upper = 0.045
                            float urdf:joint:limit:velocity = 1000
                            float3 urdf:joint:origin:rpy = (-2.9907776e-33, 0, 1.2325952e-32)
                            point3f urdf:joint:origin:xyz = (0, 0, 0)
                            prepend rel urdf:joint:parent = </tiago_dual/arm_right_7_link/arm_right_tool_link/wrist_right_ft_link/wrist_right_ft_tool_link/gripper_right_link>
                            uniform token urdf:joint:type = "prismatic"
                        }

                        def Xform "gripper_right_grasping_frame" (
                            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
                        )
                        {
                            point3f mujoco:body:pos = (0, 0, -0.12)
                            quatf mujoco:body:quat = (0.49999815, -0.5, 0.5, 0.50000185)
                            matrix4d xformOp:transform = ( (-0.0000036732051031940216, 1.6653345369377348e-16, -0.9999999999932538, 0), (-0.9999999999865077, -0.0000036731731540839974, 0.0000036732051030829993, 0), (-0.0000036731731538619528, 0.999999999993254, 1.3492429395967065e-11, 0), (0, 0, -0.12, 1) )
                            uniform token[] xformOpOrder = ["xformOp:transform"]
                        }
                    }
                }
            }
        }
    }

    def Xform "gripper_right_right_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.00002747981, 0.0024304127, 0.002448169)
        float mujoco:body:inertial:mass = 0.10103759
        point3f mujoco:body:inertial:pos = (-0.061255477, -1.1640191, 0.69088686)
        quatf mujoco:body:inertial:quat = (-0.054663375, 0.6971018, 0.066410996, 0.71179396)
        point3f mujoco:body:pos = (0, -1.3877788e-17, 0)
        quatf mujoco:body:quat = (1, 1.540744e-32, 1.2325952e-32, -8.180104e-33)
        point3f physics:centerOfMass = (-0.061255477, -1.1640191, 0.69088686)
        float3 physics:diagonalInertia = (0.00002747981, 0.0024304127, 0.002448169)
        float physics:mass = 0.10103759
        quatf physics:principalAxes = (-0.054663375, 0.6971018, 0.066410996, 0.71179396)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.00002747981
        float urdf:link:inertial:inertia:iyy = 0.0024304127
        float urdf:link:inertial:inertia:izz = 0.002448169
        float urdf:link:inertial:mass = 0.10103759
        float3 urdf:link:inertial:origin:rpy = (0.7602116, -1.5441923, 2.5528312)
        point3f urdf:link:inertial:origin:xyz = (-0.061255477, -1.1640191, 0.69088686)
        matrix4d xformOp:transform = ( (5.551115123125762e-17, -3.330669073875471e-16, 1, 0), (1, -4.000204360710246e-16, -7.141499168368867e-32, 0), (4.555315873022825e-16, 1, 3.885780586188051e-16, 0), (-0.05743999950401461, -1.0150750094771386, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "gripper_right_right_finger_link_geom_visual_0_gripper_finger_link" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/gripper_finger_link.usda@</gripper_finger_link>
        )
        {
            rel material:binding = </tiago_dual/gripper_right_right_finger_link/gripper_right_right_finger_link_geom_visual_0_gripper_finger_link/Materials/M_Black>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_finger_link__1_000092625617981__0_9999073147773743_1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (-1.0000926, -0.9999073, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_finger_link.obj@
            float3 urdf:geometry:mesh:scale = (-1.0000926, -0.9999073, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Black>
            float3 urdf:visual:origin:rpy = (0, 0, -0.00009265359)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0000926450045753, 0.00009266217395046616, 0, 0), (-0.00009264500457511221, -0.9999073378260496, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Black" (
                    prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                )
                {
                }
            }
        }

        def Cube "gripper_right_right_finger_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            point3f mujoco:geom:pos = (0.005, 0, -0.165)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (0.005, 0.025, 0.055)
            uniform token mujoco:geom:type = "box"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415)
            point3f urdf:collision:origin:xyz = (0.005, 0, -0.165)
            float3 urdf:geometry:box:size = (0.01, 0.05, 0.11)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-0.004999999978538282, 4.6326794830245134e-7, 0, 0), (-0.000002316339741512256, -0.024999999892691405, 0, 0), (0, 0, 0.055, 0), (0.005, 0, -0.165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "gripper_right_left_finger_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
    )
    {
        float3 mujoco:body:inertial:diaginertia = (0.000028091548, 0.002429843, 0.0024481271)
        float mujoco:body:inertial:mass = 0.10103759
        point3f mujoco:body:inertial:pos = (-0.061255477, -1.1640191, 0.68544334)
        quatf mujoco:body:inertial:quat = (0.6956858, -0.091258466, 0.70776117, 0.08226366)
        point3f mujoco:body:pos = (0, -1.3877788e-17, 0)
        quatf mujoco:body:quat = (1, 1.540744e-32, 1.2325952e-32, -8.180104e-33)
        point3f physics:centerOfMass = (-0.061255477, -1.1640191, 0.68544334)
        float3 physics:diagonalInertia = (0.000028091548, 0.002429843, 0.0024481271)
        float physics:mass = 0.10103759
        quatf physics:principalAxes = (0.6956858, -0.091258466, 0.70776117, 0.08226366)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0.000028091548
        float urdf:link:inertial:inertia:iyy = 0.002429843
        float urdf:link:inertial:inertia:izz = 0.0024481271
        float urdf:link:inertial:mass = 0.10103759
        float3 urdf:link:inertial:origin:rpy = (-2.6243865, 1.5495018, -2.378355)
        point3f urdf:link:inertial:origin:xyz = (-0.061255477, -1.1640191, 0.68544334)
        matrix4d xformOp:transform = ( (5.551115123125762e-17, -3.330669073875471e-16, 1, 0), (1, -4.000204360710246e-16, -7.141499168368867e-32, 0), (4.555315873022825e-16, 1, 3.885780586188051e-16, 0), (-0.05743999950401461, -1.0150750094771386, 0.6864999995529651, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "gripper_right_left_finger_link_geom_visual_0_gripper_finger_link" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
            prepend references = @./../assets/meshes/usd/gripper_finger_link.usda@</gripper_finger_link>
        )
        {
            rel material:binding = </tiago_dual/gripper_right_left_finger_link/gripper_right_left_finger_link_geom_visual_0_gripper_finger_link/Materials/M_Black>
            rel mujoco:geom:material = </mujoco/asset/materials/M_Black>
            rel mujoco:geom:mesh = </mujoco/asset/meshes/gripper_finger_link_1_000092625617981_0_9999073147773743_1_0>
            point3f mujoco:geom:pos = (0, 0, 0)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (1.0000926, 0.9999073, 1)
            uniform token mujoco:geom:type = "mesh"
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            asset urdf:geometry:mesh:filename = @./../assets/meshes/obj/gripper_finger_link.obj@
            float3 urdf:geometry:mesh:scale = (1.0000926, 0.9999073, 1)
            rel urdf:visual:material = </urdf/robot/materials/M_Black>
            float3 urdf:visual:origin:rpy = (0, -0, 3.1415)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (-1.0000926450045755, 0.00009266217395046619, 0, 0), (-0.00009264500457511223, -0.9999073378260498, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Scope "Materials"
            {
                def Material "M_Black" (
                    prepend references = @./../assets/materials/usd/M_Black.usda@</M_Black>
                )
                {
                }
            }
        }

        def Cube "gripper_right_left_finger_link_geom_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
        )
        {
            float3[] extent = [(-1, -1, -1), (1, 1, 1)]
            point3f mujoco:geom:pos = (-0.005, 0, -0.165)
            quatf mujoco:geom:quat = (0.000046326793, 0, 0, 1)
            vector3f mujoco:geom:size = (0.005, 0.025, 0.055)
            uniform token mujoco:geom:type = "box"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0, 0)]
            float[] primvars:displayOpacity = [0]
            float3 urdf:collision:origin:rpy = (0, -0, 3.1415)
            point3f urdf:collision:origin:xyz = (-0.005, 0, -0.165)
            float3 urdf:geometry:box:size = (0.01, 0.05, 0.11)
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (-0.004999999978538282, 4.6326794830245134e-7, 0, 0), (-0.000002316339741512256, -0.024999999892691405, 0, 0), (0, 0, 0.055, 0), (-0.005, 0, -0.165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

def Mujoco "mujoco"
{
    string mujoco:model = "tiago_dual"

    def MujocoAsset "asset"
    {
        def MujocoMesh "meshes"
        {
            def MujocoMesh "base"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/base.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "base_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/base_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "sick_tim551"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/sick_tim551.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "srf05"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/srf05.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "antenna"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/antenna.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "torso_fix"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/torso_fix.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "base_ring"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/base_ring.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "wheel"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/wheel.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "caster_1"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/caster_1.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "caster_2"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/caster_2.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "torso_lift_dual_arm"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/torso_lift_dual_arm.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "torso_lift_collision_shoulder"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/torso_lift_collision_shoulder.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "torso_lift_collision_core"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/torso_lift_collision_core.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "torso_lift_collision_neck"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/torso_lift_collision_neck.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "head_1"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/head_1.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "head_1_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/head_1_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "head_2"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/head_2.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "head_2_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/head_2_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_1"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_1.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_1__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_1.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_1_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_1_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_1_collision__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_1_collision.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_2"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_2.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_2__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_2.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_2_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_2_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_2_collision__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_2_collision.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_3"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_3.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_3__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_3.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_3_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_3_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_3_collision__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_3_collision.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_4"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_4.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_4__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_4.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_4_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_4_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_4_collision__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_4_collision.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_5_wrist_2017"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_5_wrist_2017.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_5_wrist_2017__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_5_wrist_2017.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_5_collision_wrist_2017"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_5_collision_wrist_2017.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_5_collision_wrist_2017__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_5_collision_wrist_2017.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_6_wrist_2017"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_6_wrist_2017.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_6_wrist_2017__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_6_wrist_2017.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "arm_6_collision_wrist_2017"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_6_collision_wrist_2017.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "arm_6_collision_wrist_2017__1_0__1_0__1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/arm_6_collision_wrist_2017.stl@
                float3 mujoco:mesh:scale = (-1, -1, -1)
            }

            def MujocoMesh "gripper_link"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/gripper_link.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "gripper_link_collision"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/gripper_link_collision.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "gripper_finger_link_1_000092625617981_0_9999073147773743_1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/gripper_finger_link.stl@
                float3 mujoco:mesh:scale = (1.0000926, 0.9999073, 1)
            }

            def MujocoMesh "gripper_finger_link__1_000092625617981__0_9999073147773743_1_0"
            {
                asset mujoco:mesh:file = @tiago_dual/meshes/stl/gripper_finger_link.stl@
                float3 mujoco:mesh:scale = (-1.0000926, -0.9999073, 1)
            }
        }

        def MujocoMaterial "materials"
        {
            def MujocoMaterial "M_White"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (1, 1, 1, 1)
            }

            def MujocoMaterial "M_DarkGrey"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.1, 0.1, 0.1, 1)
            }

            def MujocoMaterial "M_Black"
            {
                color4f mujoco:material:rgba = (0, 0, 0, 1)
            }

            def MujocoMaterial "M_LightGrey"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.9, 0.9, 0.9, 1)
            }

            def MujocoMaterial "M_Orange"
            {
                color4f mujoco:material:rgba = (1, 0.487, 0, 1)
            }

            def MujocoMaterial "M_Grey"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.7, 0.7, 0.7, 1)
            }
        }

        def MujocoTexture "textures"
        {
        }
    }

    def MujocoEquality "equality"
    {
    }
}


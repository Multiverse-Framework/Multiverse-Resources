#usda 1.0
(
    defaultPrim = "task_board"
    metersPerUnit = 1
    upAxis = "Z"
)

def Urdf "urdf"
{
    string urdf:name = "task_board"

    def UrdfRobot "robot"
    {
        def UrdfMaterial "materials"
        {
        }
    }
}

def Xform "task_board"
{
    def Xform "task_board_main" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)

        def Mesh "SM_task_board_main_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_main.usda@</SM_task_board_main>
        )
        {
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_main.dae@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_1.usda@</SM_task_board_part_1>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_1.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_2.usda@</SM_task_board_part_2>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_2.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_2" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_3.usda@</SM_task_board_part_3>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_3.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_3" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_4.usda@</SM_task_board_part_4>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_4.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_4" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_5.usda@</SM_task_board_part_5>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_5.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_5" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_6.usda@</SM_task_board_part_6>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_6.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_6" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_7.usda@</SM_task_board_part_7>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_7.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_7" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_8.usda@</SM_task_board_part_8>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_8.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_8" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_9.usda@</SM_task_board_part_9>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_9.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_9" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_10.usda@</SM_task_board_part_10>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_10.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_10" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_11.usda@</SM_task_board_part_11>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_11.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_11" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_12.usda@</SM_task_board_part_12>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_12.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_12" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_13.usda@</SM_task_board_part_13>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_13.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_13" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_14.usda@</SM_task_board_part_14>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_14.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_14" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_15.usda@</SM_task_board_part_15>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_15.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_15" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_16.usda@</SM_task_board_part_16>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_16.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_16" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_17.usda@</SM_task_board_part_17>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_17.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_17" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_18.usda@</SM_task_board_part_18>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_18.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_18" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_19.usda@</SM_task_board_part_19>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_19.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_19" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_20.usda@</SM_task_board_part_20>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_20.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_20" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_21.usda@</SM_task_board_part_21>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_21.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_21" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_22.usda@</SM_task_board_part_22>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_22.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_22" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_23.usda@</SM_task_board_part_23>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_23.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_23" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_24.usda@</SM_task_board_part_24>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_24.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_24" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_25.usda@</SM_task_board_part_25>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_25.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_25" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_26.usda@</SM_task_board_part_26>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_26.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_26" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_27.usda@</SM_task_board_part_27>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_27.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_27" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_28.usda@</SM_task_board_part_28>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_28.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_28" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_29.usda@</SM_task_board_part_29>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_29.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_29" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_30.usda@</SM_task_board_part_30>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_30.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_30" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_31.usda@</SM_task_board_part_31>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_31.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_31" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_32.usda@</SM_task_board_part_32>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_32.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_32" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_33.usda@</SM_task_board_part_33>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_33.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_33" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_34.usda@</SM_task_board_part_34>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_34.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_34" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_35.usda@</SM_task_board_part_35>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_35.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_35" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_36.usda@</SM_task_board_part_36>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_36.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_36" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_37.usda@</SM_task_board_part_37>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_37.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_37" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_38.usda@</SM_task_board_part_38>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_38.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_38" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_39.usda@</SM_task_board_part_39>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_39.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_39" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_40.usda@</SM_task_board_part_40>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_40.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_40" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_41.usda@</SM_task_board_part_41>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_41.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_main_collision_41" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_part_42.usda@</SM_task_board_part_42>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_part_42.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "task_board_clock" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.02361, 0.09598, 0.086058, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_task_board_clock_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_clock.usda@</SM_task_board_clock>
            )
            {
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_clock.dae@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_clock_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_clock.usda@</SM_task_board_clock>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_clock.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "task_board_hole_1" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0191, 0.039, 0.0734, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_task_board_hole_1_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole.usda@</SM_task_board_hole>
            )
            {
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_hole.dae@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.19634955)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032304, 0.19509032201612828, 0, 0), (-0.19509032201612828, 0.9807852804032304, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.3926991)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112867, 0.3826834323650897, 0, 0), (-0.3826834323650897, 0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.5890486)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025453, 0.5555702330196022, 0, 0), (-0.5555702330196022, 0.8314696123025453, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.7853982)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865475, 0.7071067811865476, 0, 0), (-0.7071067811865476, 0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.9817477)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196022, 0.8314696123025452, 0, 0), (-0.8314696123025452, 0.5555702330196022, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_6" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.1780972)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, 0.9238795325112866, 0, 0), (-0.9238795325112866, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_7" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.3744467)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, 0.9807852804032304, 0, 0), (-0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_8" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.5707964)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_9" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.7671459)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612841, 0.9807852804032304, 0, 0), (-0.9807852804032304, -0.19509032201612841, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_10" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.9634954)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.38268343236508984, 0.9238795325112868, 0, 0), (-0.9238795325112868, -0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_11" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.1598449)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, 0.8314696123025451, 0, 0), (-0.8314696123025451, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_12" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.3561945)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, 0.7071067811865477, 0, 0), (-0.7071067811865477, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_13" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.552544)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025456, 0.5555702330196022, 0, 0), (-0.5555702330196022, -0.8314696123025456, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_14" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.7488935)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, 0.3826834323650899, 0, 0), (-0.3826834323650899, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_15" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.9452431)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, 0.19509032201612816, 0, 0), (-0.19509032201612816, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_16" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.1415927)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_17" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.3379421)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, -0.19509032201612836, 0, 0), (0.19509032201612836, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_18" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.5342917)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, -0.3826834323650896, 0, 0), (0.3826834323650896, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_19" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.7306414)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025451, -0.5555702330196023, 0, 0), (0.5555702330196023, -0.8314696123025451, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_20" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.9269907)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, -0.7071067811865475, 0, 0), (0.7071067811865475, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_21" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.12334)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, -0.8314696123025453, 0, 0), (0.8314696123025453, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_22" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.3196898)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.3826834323650894, -0.9238795325112867, 0, 0), (0.9238795325112867, -0.3826834323650894, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_23" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.5160394)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612864, -0.9807852804032304, 0, 0), (0.9807852804032304, -0.19509032201612864, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_24" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.712389)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1, 0, 0), (1, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_25" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.9087386)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, -0.9807852804032304, 0, 0), (0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_26" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.105088)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, -0.9238795325112868, 0, 0), (0.9238795325112868, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_27" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.3014374)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196018, -0.8314696123025456, 0, 0), (0.8314696123025456, 0.5555702330196018, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_28" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.497787)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865474, -0.7071067811865477, 0, 0), (0.7071067811865477, 0.7071067811865474, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_29" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.6941366)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025452, -0.5555702330196023, 0, 0), (0.5555702330196023, 0.8314696123025452, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_30" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.8904862)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112868, -0.38268343236508956, 0, 0), (0.38268343236508956, 0.9238795325112868, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_1_collision_31" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 6.086836)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032303, -0.1950903220161287, 0, 0), (0.1950903220161287, 0.9807852804032303, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "task_board_hole_2" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.044, 0.039, 0.0734, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_task_board_hole_2_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole.usda@</SM_task_board_hole>
            )
            {
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_hole.dae@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.19634955)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032304, 0.19509032201612828, 0, 0), (-0.19509032201612828, 0.9807852804032304, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.3926991)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112867, 0.3826834323650897, 0, 0), (-0.3826834323650897, 0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.5890486)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025453, 0.5555702330196022, 0, 0), (-0.5555702330196022, 0.8314696123025453, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.7853982)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865475, 0.7071067811865476, 0, 0), (-0.7071067811865476, 0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.9817477)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196022, 0.8314696123025452, 0, 0), (-0.8314696123025452, 0.5555702330196022, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_6" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.1780972)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, 0.9238795325112866, 0, 0), (-0.9238795325112866, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_7" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.3744467)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, 0.9807852804032304, 0, 0), (-0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_8" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.5707964)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_9" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.7671459)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612841, 0.9807852804032304, 0, 0), (-0.9807852804032304, -0.19509032201612841, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_10" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.9634954)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.38268343236508984, 0.9238795325112868, 0, 0), (-0.9238795325112868, -0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_11" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.1598449)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, 0.8314696123025451, 0, 0), (-0.8314696123025451, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_12" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.3561945)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, 0.7071067811865477, 0, 0), (-0.7071067811865477, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_13" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.552544)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025456, 0.5555702330196022, 0, 0), (-0.5555702330196022, -0.8314696123025456, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_14" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.7488935)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, 0.3826834323650899, 0, 0), (-0.3826834323650899, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_15" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.9452431)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, 0.19509032201612816, 0, 0), (-0.19509032201612816, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_16" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.1415927)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_17" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.3379421)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, -0.19509032201612836, 0, 0), (0.19509032201612836, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_18" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.5342917)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, -0.3826834323650896, 0, 0), (0.3826834323650896, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_19" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.7306414)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025451, -0.5555702330196023, 0, 0), (0.5555702330196023, -0.8314696123025451, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_20" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.9269907)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, -0.7071067811865475, 0, 0), (0.7071067811865475, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_21" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.12334)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, -0.8314696123025453, 0, 0), (0.8314696123025453, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_22" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.3196898)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.3826834323650894, -0.9238795325112867, 0, 0), (0.9238795325112867, -0.3826834323650894, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_23" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.5160394)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612864, -0.9807852804032304, 0, 0), (0.9807852804032304, -0.19509032201612864, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_24" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.712389)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1, 0, 0), (1, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_25" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.9087386)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, -0.9807852804032304, 0, 0), (0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_26" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.105088)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, -0.9238795325112868, 0, 0), (0.9238795325112868, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_27" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.3014374)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196018, -0.8314696123025456, 0, 0), (0.8314696123025456, 0.5555702330196018, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_28" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.497787)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865474, -0.7071067811865477, 0, 0), (0.7071067811865477, 0.7071067811865474, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_29" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.6941366)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025452, -0.5555702330196023, 0, 0), (0.5555702330196023, 0.8314696123025452, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_30" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.8904862)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112868, -0.38268343236508956, 0, 0), (0.38268343236508956, 0.9238795325112868, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_2_collision_31" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 6.086836)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032303, -0.1950903220161287, 0, 0), (0.1950903220161287, 0.9807852804032303, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "task_board_hole_3" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (2.220446049250313e-16, 0, 1, 0), (0, 1, 0, 0), (-1, 0, 2.220446049250313e-16, 0), (0.037334, -0.102, 0.0963, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_task_board_hole_3_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole.usda@</SM_task_board_hole>
            )
            {
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_hole.dae@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.19634955)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032304, 0.19509032201612828, 0, 0), (-0.19509032201612828, 0.9807852804032304, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.3926991)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112867, 0.3826834323650897, 0, 0), (-0.3826834323650897, 0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.5890486)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025453, 0.5555702330196022, 0, 0), (-0.5555702330196022, 0.8314696123025453, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.7853982)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865475, 0.7071067811865476, 0, 0), (-0.7071067811865476, 0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 0.9817477)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196022, 0.8314696123025452, 0, 0), (-0.8314696123025452, 0.5555702330196022, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_6" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.1780972)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, 0.9238795325112866, 0, 0), (-0.9238795325112866, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_7" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.3744467)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, 0.9807852804032304, 0, 0), (-0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_8" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.5707964)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (2.220446049250313e-16, 1, 0, 0), (-1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_9" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.7671459)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612841, 0.9807852804032304, 0, 0), (-0.9807852804032304, -0.19509032201612841, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_10" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 1.9634954)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.38268343236508984, 0.9238795325112868, 0, 0), (-0.9238795325112868, -0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_11" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.1598449)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, 0.8314696123025451, 0, 0), (-0.8314696123025451, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_12" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.3561945)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, 0.7071067811865477, 0, 0), (-0.7071067811865477, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_13" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.552544)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025456, 0.5555702330196022, 0, 0), (-0.5555702330196022, -0.8314696123025456, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_14" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.7488935)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, 0.3826834323650899, 0, 0), (-0.3826834323650899, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_15" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 2.9452431)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, 0.19509032201612816, 0, 0), (-0.19509032201612816, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_16" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.1415927)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-1, 1.2246467991473532e-16, 0, 0), (-1.2246467991473532e-16, -1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_17" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.3379421)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9807852804032307, -0.19509032201612836, 0, 0), (0.19509032201612836, -0.9807852804032307, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_18" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.5342917)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.9238795325112867, -0.3826834323650896, 0, 0), (0.3826834323650896, -0.9238795325112867, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_19" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.7306414)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.8314696123025451, -0.5555702330196023, 0, 0), (0.5555702330196023, -0.8314696123025451, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_20" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 3.9269907)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.7071067811865475, -0.7071067811865475, 0, 0), (0.7071067811865475, -0.7071067811865475, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_21" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.12334)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.5555702330196024, -0.8314696123025453, 0, 0), (0.8314696123025453, -0.5555702330196024, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_22" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.3196898)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.3826834323650894, -0.9238795325112867, 0, 0), (0.9238795325112867, -0.3826834323650894, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_23" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.5160394)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-0.19509032201612864, -0.9807852804032304, 0, 0), (0.9807852804032304, -0.19509032201612864, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_24" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.712389)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (-2.220446049250313e-16, -1, 0, 0), (1, -2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_25" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 4.9087386)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1950903220161283, -0.9807852804032304, 0, 0), (0.9807852804032304, 0.1950903220161283, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_26" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.105088)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.38268343236508984, -0.9238795325112868, 0, 0), (0.9238795325112868, 0.38268343236508984, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_27" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.3014374)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.5555702330196018, -0.8314696123025456, 0, 0), (0.8314696123025456, 0.5555702330196018, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_28" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.497787)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.7071067811865474, -0.7071067811865477, 0, 0), (0.7071067811865477, 0.7071067811865474, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_29" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.6941366)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8314696123025452, -0.5555702330196023, 0, 0), (0.5555702330196023, 0.8314696123025452, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_30" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 5.8904862)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9238795325112868, -0.38268343236508956, 0, 0), (0.38268343236508956, 0.9238795325112868, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "SM_task_board_hole_3_collision_31" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_hole_side.usda@</SM_task_board_hole_side>
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                float3 urdf:collision:origin:rpy = (0, 0, 6.086836)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_hole_side.stl@
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.9807852804032303, -0.1950903220161287, 0, 0), (0.1950903220161287, 0.9807852804032303, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def PhysicsRevoluteJoint "task_board_lid_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </task_board/task_board_main>
            rel physics:body1 = </task_board/task_board_lid>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.033026, -0.0472, 0.079405)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            float physics:lowerLimit = 0
            float physics:upperLimit = 118.77
            vector3f urdf:joint:axis = (0, 1, 0)
            prepend rel urdf:joint:child = </task_board/task_board_lid>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = 0
            float urdf:joint:limit:upper = 2.0729275
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.033026, -0.0472, 0.079405)
            prepend rel urdf:joint:parent = </task_board/task_board_main>
            uniform token urdf:joint:type = "revolute"
        }

        def PhysicsPrismaticJoint "task_board_slider_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </task_board/task_board_main>
            rel physics:body1 = </task_board/task_board_slider>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.04301, 0.061594, 0.082959)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0, 0.7071068, 0)
            quatf physics:localRot1 = (0.7071068, 0, 0.7071068, 0)
            float physics:lowerLimit = -0.025
            float physics:upperLimit = 0.01
            vector3f urdf:joint:axis = (1, 0, 0)
            prepend rel urdf:joint:child = </task_board/task_board_slider>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.025
            float urdf:joint:limit:upper = 0.01
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (0.04301, 0.061594, 0.082959)
            prepend rel urdf:joint:parent = </task_board/task_board_main>
            uniform token urdf:joint:type = "prismatic"
        }

        def PhysicsPrismaticJoint "task_board_button_1_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </task_board/task_board_main>
            rel physics:body1 = </task_board/task_board_button_1>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.043957, 0.09625, 0.0835)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -0.003
            float physics:upperLimit = 0
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </task_board/task_board_button_1>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.003
            float urdf:joint:limit:upper = 0
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.043957, 0.09625, 0.0835)
            prepend rel urdf:joint:parent = </task_board/task_board_main>
            uniform token urdf:joint:type = "prismatic"
        }

        def PhysicsPrismaticJoint "task_board_button_2_joint" (
            prepend apiSchemas = ["UrdfJointAPI"]
        )
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </task_board/task_board_main>
            rel physics:body1 = </task_board/task_board_button_2>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.02995, 0.09625, 0.0835)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -0.003
            float physics:upperLimit = 0
            vector3f urdf:joint:axis = (0, 0, 1)
            prepend rel urdf:joint:child = </task_board/task_board_button_2>
            float urdf:joint:limit:effort = 1000
            float urdf:joint:limit:lower = -0.003
            float urdf:joint:limit:upper = 0
            float urdf:joint:limit:velocity = 1000
            float3 urdf:joint:origin:rpy = (0, 0, 0)
            point3f urdf:joint:origin:xyz = (-0.02995, 0.09625, 0.0835)
            prepend rel urdf:joint:parent = </task_board/task_board_main>
            uniform token urdf:joint:type = "prismatic"
        }
    }

    def Xform "task_board_lid" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.033026, -0.0472, 0.079405, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_task_board_lid_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_lid.usda@</SM_task_board_lid>
        )
        {
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_lid.dae@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_lid_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_lid.usda@</SM_task_board_lid>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_lid.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_lid_collision_1" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_lid_hinge.usda@</SM_task_board_lid_hinge>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_lid_hinge.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "task_board_lid_knob" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
        )
        {
            point3f physics:centerOfMass = (0, 0, 0)
            float3 physics:diagonalInertia = (0, 0, 0)
            float physics:mass = 0
            quatf physics:principalAxes = (1, 0, 0, 0)
            float urdf:link:inertial:inertia:ixx = 0
            float urdf:link:inertial:inertia:iyy = 0
            float urdf:link:inertial:inertia:izz = 0
            float urdf:link:inertial:mass = 0
            float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
            point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.066776, 0, 0.010587, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "SM_task_board_lid_knob_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
                prepend references = @./../meshes/usd/task_board_lid_knob.usda@</SM_task_board_lid_knob>
            )
            {
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_lid_knob.dae@
                float3 urdf:visual:origin:rpy = (0, 0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "SM_task_board_lid_knob_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI"]
            )
            {
                float3[] extent = [(-0.004, -0.004, -0.003), (0.004, 0.004, 0.003)]
                double height = 0.006
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.004
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, -0.00255)
                float urdf:geometry:cylinder:length = 0.006
                float urdf:geometry:cylinder:radius = 0.004
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, -0.00255, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "SM_task_board_lid_knob_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI"]
            )
            {
                float3[] extent = [(-0.007486, -0.007486, -0.00135), (0.007486, 0.007486, 0.00135)]
                double height = 0.0027
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.007486
                float3 urdf:collision:origin:rpy = (0, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.00155)
                float urdf:geometry:cylinder:length = 0.0027
                float urdf:geometry:cylinder:radius = 0.007486
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.00155, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }

    def Xform "task_board_slider" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.04301, 0.061594, 0.082959, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_task_board_slider_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_slider.usda@</SM_task_board_slider>
        )
        {
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_slider.dae@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_slider_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_slider.usda@</SM_task_board_slider>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_slider.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "task_board_button_1" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.043957, 0.09625, 0.0835, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_task_board_button_1_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_button.usda@</SM_task_board_button>
        )
        {
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_button.dae@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_button_1_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_button.usda@</SM_task_board_button>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_button.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "task_board_button_2" (
        prepend apiSchemas = ["UrdfLinkAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0, 0, 0)
        float physics:mass = 0
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        float urdf:link:inertial:inertia:ixx = 0
        float urdf:link:inertial:inertia:iyy = 0
        float urdf:link:inertial:inertia:izz = 0
        float urdf:link:inertial:mass = 0
        float3 urdf:link:inertial:origin:rpy = (0, 0, 0)
        point3f urdf:link:inertial:origin:xyz = (0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.02995, 0.09625, 0.0835, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "SM_task_board_button_2_visual_0" (
            prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_button.usda@</SM_task_board_button>
        )
        {
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            asset urdf:geometry:mesh:filename = @./../meshes/dae/task_board_button.dae@
            float3 urdf:visual:origin:rpy = (0, 0, 0)
            point3f urdf:visual:origin:xyz = (0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Mesh "SM_task_board_button_2_collision_0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI"]
            prepend references = @./../meshes/usd/task_board_button.usda@</SM_task_board_button>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
            float[] primvars:displayOpacity = [1]
            float3 urdf:collision:origin:rpy = (0, 0, 0)
            point3f urdf:collision:origin:xyz = (0, 0, 0)
            asset urdf:geometry:mesh:filename = @./../meshes/stl/task_board_button.stl@
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

